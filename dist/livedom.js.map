{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/DataManager.ts","src/Directive.ts","src/DirectiveElementEach.ts","src/DirectiveElementElse.ts","src/DirectiveElementIf.ts","src/DirectiveElementRender.ts","src/DirectiveHtmlInputRender.ts","src/DomScanner.ts","src/DomScannerLoaded.ts","src/LiveDom.ts","src/Page.ts","src/PageController.ts","src/Parser.ts","src/main.ts"],"names":["f","exports","module","define","amd","window","global","self","this","LiveDom","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","DataManager","initData","pageData","Object","create","scopeDataStack","data","prototype","mergePageData","assign","hasUseMergePageData","paths","pushScopeData","scopeData","push","popScopeData","pop","getPrototypeOf","Directive","controller","hasDirective","_info","info","directives","Array","isArray","_i","_a","_super","Directive_1","propLiveKeyData","Symbol","DirectiveElementEach","__extends","element","config","attrs","attr","attrInfo","removeAttribute","render","continueRender","elementInfo","items","exec","dataManager","renderElements","l","item","keyVal","itemElement","exists","find","ele","indexOf","this_1","cloneNode","itemName","indexName","itemRenderElements","_this","getAttribute","DirectiveElementEach_1","DirectiveElementIf_1","DirectiveElementElse","hasAttribute","prevNode","previousSibling","isPlaceholder","prevNodeInfo","getNodeInfo","DirectiveElementIf","nodeType","DirectiveElementRender","attrName","attrVal","setAttribute","renderChildNodes","DirectiveHtmlInputRender","tagName","toLocaleLowerCase","value","checked","keys","val","DomScanner","doc","options","ignoreElementTags","script","style","observer","MutationObserver","mutationObserverCallback","bind","mutationList","DomScanner_1","DomScannerLoaded","scan","scanPromise","Promise","resolve","reject","readyState","walkNode","documentElement","observe","subtree","childList","attributes","characterData","addEventListener","node","processElement","processText","processComment","toLowerCase","processElementStart","childNodes","forEach","processElementEnd","elementStart","elementEnd","comment","text","apply","arguments","Page_1","PageController_1","initPage","PageController","document","createPage","page","Page","updateData","updatePageData","DomScannerLoaded_1","Parser_1","DataManager_1","DirectiveElementRender_1","DirectiveElementElse_1","DirectiveHtmlInputRender_1","propLiveInfo","nextId","scanCompletedPromise","requestRenderPagePromise","elementDirectivesConfig","scanner","scanElementStart","scanElementEnd","scanComment","scanText","then","loaded","requestRenderPage","removeNode","parentNode","removeChild","insertAfter","before","nextSibling","insertBefore","appendChild","renderElement","setupElement","setupText","id","placeholderComment","setupAttribute","name","setupElementDirectives","setNodeInfo","directive","srcVal","parseResult","Parser","parseText","hasTextExpress","placeholder","nextNode","processElementDirectiveRender","getPlaceholderComment","exists_1","prev","renderElements_1","_b","exists_2","renderInfo","directiveIndex","createComment","nodes","_t","src","des","cloneNodesInfo","srcNodes","desNodes","hasNodeInfo","isLiveNode","expressionRegex","parts","match","lastIndex","index","substring","names","split","lastNamePath","namesPath","map","body","concat","join","Function","buildTextFunction","results","parts_1","text_1","buildParseResultRenderer","result","LiveDom_1","default"],"mappings":"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","file":"livedom.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nexport type TypeData = {[k: string]: any};\r\n\r\nexport class DataManager\r\n{\r\n    public data: TypeData;\r\n    public initData: TypeData;\r\n    public pageData: TypeData;\r\n    // public mergeData: TypeData;\r\n    private scopeDataStack: TypeData[];\r\n\r\n    public constructor(initData: TypeData)\r\n    {\r\n        this.initData = initData;\r\n        this.pageData = Object.create(this.initData);\r\n\r\n        this.scopeDataStack = [];\r\n\r\n        this.data = Object.create(this.pageData);\r\n    }\r\n\r\n    public mergePageData(pageData: TypeData)\r\n    {\r\n        Object.assign(this.pageData, pageData);\r\n    }\r\n    public hasUseMergePageData(paths: string[][]): boolean\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public pushScopeData(scopeData: TypeData)\r\n    {\r\n        this.scopeDataStack.push(scopeData);\r\n        this.data = Object.create(this.data);\r\n        Object.assign(this.data, scopeData);\r\n    }\r\n    public popScopeData(scopeData: TypeData)\r\n    {\r\n        if (this.scopeDataStack[this.scopeDataStack.length - 1] != scopeData)\r\n            throw new Error(\"popScopeData fail! scopeData not last data.\");\r\n\r\n        this.scopeDataStack.pop();\r\n        this.data = Object.getPrototypeOf(this.data);\r\n    }\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { ElementRenderInfo, NodeElementInfo, NodeInfo } from \"./NodeInfo\";\r\n\r\nexport interface DirectiveConfig<N extends Node = Node>\r\n{\r\n    attr?: string;\r\n    create: (controller: PageController, node: N, info: NodeInfo, config: DirectiveConfig<N>)=>Directive<N>|null;\r\n}\r\n\r\nexport interface DirectiveRender<N extends Node = Node>\r\n{\r\n    (element: N, renderInfo: ElementRenderInfo): N[];\r\n}\r\n// class DirectiveText extends Directive\r\n// {\r\n// }\r\n\r\n\r\nexport abstract class Directive<N extends Node = Node>\r\n{\r\n    public static hasDirective(_info: NodeInfo) : boolean\r\n    {\r\n        const info = _info as NodeElementInfo;\r\n        \r\n        if(!info.directives || !Array.isArray(info.directives))\r\n            return false;\r\n        \r\n        for(const d of info.directives)\r\n        {\r\n            if(d instanceof this)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    // public name: string = null;\r\n    // public abstract buildNode(nodeInfo: NodeInfo, node: Node);\r\n    public abstract render(element: N, renderInfo: ElementRenderInfo, continueRender: DirectiveRender<N>): N[];\r\n    // public abstract unsetNode(nodeInfo: NodeInfo);\r\n    protected controller: PageController;\r\n    protected constructor(controller: PageController)\r\n    {\r\n        this.controller = controller;\r\n    }\r\n}\r\n\r\n// class DirectiveElementStateClass extends Directive //live-state=\"rendering|complete\"\r\n// {\r\n// }\r\n// class DirectiveElementContent extends Directive //live:cont\r\n// {\r\n// }\r\n\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nconst propLiveKeyData = Symbol(\"LiveDomKeyDataProp\");\r\n\r\nexport class DirectiveElementEach extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementEach\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        \r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n        \r\n        return new DirectiveElementEach(controller, element, attrInfo);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    private itemName: string;\r\n    private indexName: string;\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n        this.itemName = element.getAttribute(\"live:item\") || \"item\";\r\n        this.indexName = element.getAttribute(\"live:index\") || \"index\";\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const items = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        // info.directivesVal[attrLiveEach] = items;\r\n        \r\n        if(!Array.isArray(items) || items.length == 0)\r\n            return [];\r\n        \r\n        let renderElements: Element[] = [];\r\n        for(let i=0, l=items.length; i<l; ++i)\r\n        {\r\n            const item = items[i];\r\n            // console.log(\"DirectiveElementEach item:\", item);\r\n            const keyVal = item; //TODO keyGetter(item), default return item\r\n            \r\n            // console.log(\"processElementEach itemElement from exists: \", info.exists.find((ele: Element) => ele[propLiveKeyData]==keyVal && renderElements.indexOf(ele)<0));\r\n            // const itemElement = this.controller.cloneNode(elementInfo.element);\r\n            const itemElement = info.exists.find((ele: Element) => propLiveKeyData in ele && ele[propLiveKeyData] == keyVal && renderElements.indexOf(ele) < 0) as Element ||\r\n                                this.controller.cloneNode(elementInfo.element);\r\n            itemElement[propLiveKeyData] = keyVal;\r\n            \r\n            const scopeData = { [this.itemName]: item, [this.indexName]: i };\r\n            this.controller.dataManager.pushScopeData(scopeData);\r\n            const itemRenderElements = continueRender(itemElement, info);\r\n            this.controller.dataManager.popScopeData(scopeData);\r\n            \r\n            if (itemRenderElements.length > 0)\r\n                renderElements.push(itemRenderElements[0]);\r\n        }\r\n\r\n        return renderElements;\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementElse extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementElse\r\n    {\r\n        if (!element.hasAttribute(config.attr))\r\n            return null;\r\n        \r\n        element.removeAttribute(config.attr);\r\n        \r\n        return new DirectiveElementElse(controller, element);\r\n    }\r\n    \r\n    // private element: Element;\r\n    protected constructor(controller: PageController, element: Element)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementElse renderNode:\", element, element.previousElementSibling, info);\r\n        let prevNode: Node = info.exists[0];\r\n        while(prevNode = prevNode.previousSibling)\r\n        {\r\n            if(this.controller.isPlaceholder(prevNode))\r\n            {\r\n                const prevNodeInfo = this.controller.getNodeInfo(prevNode);\r\n                if(DirectiveElementIf.hasDirective(prevNodeInfo) || DirectiveElementEach.hasDirective(prevNodeInfo))\r\n                    return continueRender(element, info);\r\n                \r\n                break;\r\n            }\r\n            \r\n            if(prevNode.nodeType == 1) //1: Node.ELEMENT_NODE\r\n                break;\r\n        }\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementIf extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementIf\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        \r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n        \r\n        return new DirectiveElementIf(controller, element, attrInfo);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const val = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        if (val)\r\n            return continueRender(element, info);\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementRender extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementRender\r\n    {\r\n        return new DirectiveElementRender(controller);\r\n    }\r\n\r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementRender renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n\r\n        for (const attrName in elementInfo.attrs)\r\n        {\r\n            // if has custom element and xxxxx()\r\n            // else if attrVal != attr.value\r\n            const attrInfo = elementInfo.attrs[attrName];\r\n            const attrVal = attrInfo.exec(this.controller.dataManager.data);\r\n            // renderInfo.attrsVal[attrName] = attrVal;\r\n            element.setAttribute(attrName, attrVal);\r\n        }\r\n\r\n        this.controller.renderChildNodes(element);\r\n\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo, AttrInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\ntype AttrsInfoMap = {[name: string]: AttrInfo};\r\n\r\nexport class DirectiveHtmlInputRender extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveHtmlInputRender\r\n    {\r\n        if(element.tagName.toLocaleLowerCase() != \"input\")\r\n            return null;\r\n        \r\n        const attrs: AttrsInfoMap = {};\r\n        \r\n        if(element.hasAttribute(\"value\") && info.attrs.value)\r\n        {\r\n            attrs.value = info.attrs.value;\r\n            element.removeAttribute(\"value\");\r\n            delete info.attrs.value;\r\n        }\r\n        \r\n        if(element.hasAttribute(\"checked\") && info.attrs.checked)\r\n        {\r\n            attrs.checked = info.attrs.checked;\r\n            element.removeAttribute(\"checked\");\r\n            delete info.attrs.checked;\r\n        }\r\n        \r\n        if(Object.keys(attrs).length > 0)\r\n            return new DirectiveHtmlInputRender(controller, element, attrs);\r\n        return null;\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrs: AttrsInfoMap;\r\n\r\n    protected constructor(controller: PageController, element: Element, attrs: AttrsInfoMap)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrs = attrs;\r\n    }\r\n\r\n    public render(element: HTMLInputElement, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        \r\n        if(this.attrs.value)\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.value.exec(this.controller.dataManager.data);\r\n            element.setAttribute(\"value\", val);\r\n            element.value = val;\r\n        }\r\n        \r\n        if(this.attrs.checked)\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.checked.exec(this.controller.dataManager.data);\r\n            // element.setAttribute(\"value\", val);\r\n            element.checked = !!val;\r\n        }\r\n        \r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","\r\n\r\nexport interface DomScannerOptions\r\n{\r\n    elementStart(element: Element): void;\r\n    elementEnd(element: Element): void;\r\n    comment(comment: Comment): void;\r\n    text(text: Text): void;\r\n}\r\n\r\nexport abstract class DomScanner\r\n{\r\n    protected doc: Document;\r\n    protected observer: MutationObserver;\r\n    protected options: DomScannerOptions;\r\n    protected ignoreElementTags = {script: true, style: true};\r\n\r\n    public constructor(doc: Document, options: DomScannerOptions)\r\n    {\r\n        this.options = options;\r\n        this.doc = doc;\r\n        this.observer = new MutationObserver(this.mutationObserverCallback.bind(this));\r\n    }\r\n\r\n    public abstract scan(): Promise<void>;\r\n\r\n    private mutationObserverCallback(mutationList: MutationRecord[])\r\n    {\r\n        // console.log(\"mutationObserverCallback:\", mutationList);\r\n        // push into loading queue\r\n    }\r\n}\r\n","import { DomScanner } from \"./DomScanner\";\r\n\r\nexport class DomScannerLoaded extends DomScanner\r\n{\r\n    protected scanPromise: Promise<void> = null;\r\n\r\n    public scan(): Promise<void>\r\n    {\r\n        if (this.scanPromise)\r\n            return this.scanPromise;\r\n\r\n        return this.scanPromise = new Promise<void>((resolve, reject) =>\r\n        {\r\n            if (this.doc.readyState == \"complete\")\r\n            {\r\n                this.walkNode(this.doc.documentElement);\r\n                this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                resolve();\r\n            }\r\n\r\n            else\r\n            {\r\n                this.doc.addEventListener(\"DOMContentLoaded\", () =>\r\n                {\r\n                    this.walkNode(this.doc.documentElement);\r\n                    this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    protected walkNode(node: Node)\r\n    {\r\n        // console.log(\"walk node:\", node, this.isCompletedNode(node));\r\n        switch (node.nodeType)\r\n        {\r\n            case 1: //ELEMENT_NODE\r\n                this.processElement(node as Element);\r\n                break;\r\n            case 3: //TEXT_NODE\r\n                this.processText(node as Text);\r\n                break;\r\n            // case 4: //CDATA_SECTION_NODE\r\n            //     if(childInfo = initText(controller, node as Text))\r\n            //     {\r\n            //         info.watch = info.watch.concat(childInfo.watch);\r\n            //     }\r\n            //     break;\r\n            case 8: //COMMENT_NODE\r\n                this.processComment(node as Comment);\r\n                break;\r\n            // default : //Not support type\r\n            //     break;\r\n        }\r\n\r\n    }\r\n\r\n    protected processElement(element: Element)\r\n    {\r\n        // console.log(\"process element:\", element);\r\n        if (this.ignoreElementTags[element.tagName.toLowerCase()])\r\n            return;\r\n\r\n        // if(this.incompleteNodes.indexOf(element) < 0)\r\n        this.processElementStart(element);\r\n\r\n        element.childNodes.forEach((node: Node) =>\r\n        {\r\n            this.walkNode(node);\r\n        });\r\n\r\n        this.processElementEnd(element);\r\n    }\r\n\r\n    protected processElementStart(element: Element)\r\n    {\r\n        // console.log(\"processElementStart:\", element);\r\n        this.options.elementStart(element);\r\n    }\r\n    protected processElementEnd(element: Element)\r\n    {\r\n        // console.log(\"processElementEnd:\", element);\r\n        this.options.elementEnd(element);\r\n    }\r\n    protected processComment(node: Comment)\r\n    {\r\n        // console.log(\"processComment:\", node);\r\n        this.options.comment(node);\r\n    }\r\n    protected processText(node: Text)\r\n    {\r\n        // console.log(\"processText:\", node);\r\n        this.options.text(node);\r\n    }\r\n}\r\n","import { createPage, Page, PageOptions } from \"./Page\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport default class LiveDom\r\n{\r\n    public static initPage(options: PageOptions = {}) : Page\r\n    {\r\n        const controller = new PageController(document, options);\r\n        return createPage(controller);\r\n    }\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\nimport { PageController } from \"./PageController\";\r\n\r\n //TODO singleton for page, and life in doc\r\n\r\nexport interface PageOptions\r\n{\r\n    // container?: Element|string;\r\n    data?: TypeData; //init data\r\n    // directives?: MapObject<DirectiveOptions>;\r\n    loaded?: ()=>void;\r\n    // debug?: boolean;\r\n}\r\n\r\nexport function createPage(controller: PageController) : Page\r\n{\r\n    const page = new Page();\r\n    \r\n    page.updateData = controller.updatePageData.bind(controller);\r\n    // page.onReady = function(cb)\r\n    // {\r\n    //     controller.scanCompletedPromise.then(cb);\r\n    // }\r\n    \r\n    return page;\r\n}\r\n\r\nexport class Page\r\n{\r\n    public updateData: (data: TypeData) => Promise<void>;\r\n    // public onReady: (callback: ()=>void) => void;\r\n}\r\n\r\n","import { DomScanner } from \"./DomScanner\";\r\nimport { DomScannerLoaded } from \"./DomScannerLoaded\";\r\nimport { Parser } from \"./Parser\";\r\nimport { PageOptions } from \"./Page\";\r\nimport { DataManager, TypeData } from \"./DataManager\";\r\nimport { AttrInfo, ElementRenderInfo, NodeElementInfo, NodeInfo, NodeTextInfo } from \"./NodeInfo\";\r\nimport { Directive, DirectiveConfig } from \"./Directive\";\r\nimport { DirectiveElementRender } from \"./DirectiveElementRender\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { DirectiveElementElse } from \"./DirectiveElementElse\";\r\nimport { DirectiveHtmlInputRender } from \"./DirectiveHtmlInputRender\";\r\n\r\nconst propLiveInfo = Symbol(\"LiveDomInfoProp\");\r\nconst attrLiveName = \"_ld\";\r\nconst attrLiveEach = \"live:each\";\r\nconst attrLiveIf = \"live:if\";\r\nconst attrLiveElse = \"live:else\";\r\nlet nextId = 1001;\r\n\r\nexport class PageController\r\n{\r\n    public doc: Document;\r\n    public options: PageOptions;\r\n    public dataManager: DataManager;\r\n    public scanCompletedPromise: Promise<void> = null;\r\n    \r\n    private scanner: DomScanner;\r\n    private elementDirectivesConfig: DirectiveConfig<Element>[];\r\n    // private directiveText: DirectiveText;\r\n    // private nodeInfos: MapObject<NodeInfo>;\r\n    private requestRenderPagePromise: Promise<void> = null;\r\n    \r\n    public constructor(doc: Document, options: PageOptions)\r\n    {\r\n        this.doc = doc;\r\n        this.options = options;\r\n        this.dataManager = new DataManager(options.data || {});\r\n        this.elementDirectivesConfig = [\r\n            {attr: attrLiveEach, create: DirectiveElementEach.create, },\r\n            {attr: attrLiveIf, create: DirectiveElementIf.create, },\r\n            {attr: attrLiveElse, create: DirectiveElementElse.create, },\r\n            {attr: null, create: DirectiveHtmlInputRender.create, },\r\n            {attr: null, create: DirectiveElementRender.create, },\r\n        ];\r\n        // this.directiveText = new DirectiveText();\r\n        // this.nodeInfos = {};\r\n        \r\n        this.scanner = new DomScannerLoaded(document, {\r\n            elementStart: this.scanElementStart.bind(this),\r\n            elementEnd: this.scanElementEnd.bind(this),\r\n            comment: this.scanComment.bind(this),\r\n            text: this.scanText.bind(this),\r\n        });\r\n        \r\n        this.scanCompletedPromise = this.scanner.scan().\r\n        then(() =>\r\n        {\r\n            if(this.options.loaded)\r\n                this.options.loaded();\r\n            \r\n            this.requestRenderPage();\r\n        });\r\n    }\r\n    \r\n    public updatePageData(data: TypeData = {}) : Promise<void>\r\n    {\r\n        // console.log(\"updatePageData:\", data);\r\n        this.dataManager.mergePageData(data);\r\n        return this.requestRenderPage();\r\n    }\r\n    private requestRenderPage() : Promise<void>\r\n    {\r\n        if(this.requestRenderPagePromise)\r\n            return this.requestRenderPagePromise;\r\n        \r\n        return this.requestRenderPagePromise = this.scanCompletedPromise.\r\n        then(() =>\r\n        {\r\n            this.requestRenderPagePromise = null;\r\n            this.renderElement(this.doc.documentElement);\r\n        });\r\n    }\r\n    \r\n    private scanElementStart(element: Element) : void\r\n    {\r\n        // console.log(\"elementStart:\", element);\r\n        this.setupElement(element);\r\n    }\r\n    private scanElementEnd(element: Element) : void\r\n    {\r\n        // this.renderElement(element);\r\n    }\r\n    private scanComment(comment: Comment) : void\r\n    {\r\n        // console.log(\"comment:\", comment);\r\n    }\r\n    private scanText(text: Text) : void\r\n    {\r\n        // console.log(\"text:\", text);\r\n        this.setupText(text);\r\n    }\r\n    \r\n    private setupElement(element: Element)\r\n    {\r\n        const info: NodeElementInfo = {\r\n            id: 'LDE'+(nextId++),\r\n            element,\r\n            placeholderComment: null,\r\n            attrs: {},\r\n            directives: [],\r\n        };\r\n        \r\n        // console.log(\"DirectiveElement build node:\", nodeInfo, node);\r\n        const attrs = element.attributes;\r\n        for(let i=attrs.length-1; i>=0; --i)\r\n        {\r\n            const attr = attrs[i];\r\n            const attrInfo = this.setupAttribute(attr);\r\n            // console.log(\"initElement attribute:\", attr, attrInfo);\r\n            if(attrInfo)\r\n            {\r\n                info.attrs[attr.name] = attrInfo;\r\n                // attr.value = attrInfo.exec(this.data);\r\n            }\r\n        }\r\n        \r\n        this.setupElementDirectives(element, info);\r\n        \r\n        if(Object.keys(info.attrs).length == 0 && Object.keys(info.directives).length == 0)\r\n        {\r\n            this.setNodeInfo(element, null);\r\n            return ;\r\n        }\r\n        \r\n        info.render = this.renderElement.bind(this);\r\n        this.setNodeInfo(element, info);\r\n    }\r\n    private setupElementDirectives(element: Element, info: NodeElementInfo)\r\n    {\r\n        for(const config of this.elementDirectivesConfig)\r\n        {\r\n            const directive = config.create(this, element, info, config);\r\n            if(directive)\r\n                info.directives.push(directive);\r\n        }\r\n    }\r\n    private setupAttribute(attr: Attr) : AttrInfo\r\n    {\r\n        const srcVal = attr.value;\r\n        const parseResult = Parser.parseText(srcVal);\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return null;\r\n        \r\n        return {\r\n            // srcVal,\r\n            exec: parseResult.exec,\r\n        };\r\n    }\r\n    private renderElement(placeholder: Element)\r\n    {\r\n        const elementInfo = this.getNodeInfo(placeholder) as NodeElementInfo;\r\n        // console.log(\"renderElement:\", placeholder, this.isLiveNode(placeholder), elementInfo);\r\n        if(! elementInfo)\r\n        {\r\n            this.renderChildNodes(placeholder);\r\n            return ;\r\n        }\r\n        \r\n        const exists: Node[] = [placeholder];\r\n        let nextNode = placeholder.nextSibling;\r\n        while(nextNode)\r\n        {\r\n            const nextInfo = this.getNodeInfo(nextNode);\r\n            if(nextInfo != elementInfo)\r\n                break;\r\n            \r\n            exists.push(nextNode);\r\n            nextNode = nextNode.nextSibling;\r\n        }\r\n        \r\n        const renderInfo: ElementRenderInfo = {\r\n            elementInfo,\r\n            exists,\r\n            // attrsVal: {}, //TODO no use\r\n        };\r\n        \r\n        const element = placeholder.nodeType==1 ? placeholder as Element : elementInfo.element;\r\n        const renderElements = this.processElementDirectiveRender(element, renderInfo, 0);\r\n        // console.log(\"renderElement renderElements:\", element, renderElements, renderInfo);\r\n        if(renderElements.length == 0)\r\n        {\r\n            // console.log(\"renderElement renderElements remove:\", exists.length, element.parentNode, element);\r\n            const placeholderComment = this.getPlaceholderComment(elementInfo);\r\n            insertAfter(placeholder, placeholderComment);\r\n            for(const ele of exists)\r\n            {\r\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>\", ele.parentNode, ele);\r\n                if(ele != placeholderComment)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let prev = placeholder;\r\n            for(const ele of renderElements)\r\n            {\r\n                insertAfter(prev, ele);\r\n                prev = ele;\r\n            }\r\n            \r\n            for(const ele of exists)\r\n            {\r\n                if(renderElements.indexOf(ele as Element) < 0)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n    }\r\n    private processElementDirectiveRender(element: Element, renderInfo: ElementRenderInfo, directiveIndex: number) : Element[]\r\n    {\r\n        const directives = renderInfo.elementInfo.directives;\r\n        \r\n        if(directiveIndex < directives.length)\r\n        {\r\n            return directives[directiveIndex].render(\r\n                element,\r\n                renderInfo, \r\n                (ele: Element, info: ElementRenderInfo) => this.processElementDirectiveRender(ele, info, directiveIndex+1)\r\n            );\r\n        }\r\n        \r\n        return [element];\r\n    }\r\n    public isPlaceholder(node: Node) : boolean\r\n    {\r\n        if(node.nodeType != 8) //8: Node.COMMENT_NODE\r\n            return false;\r\n        \r\n        const info = this.getNodeInfo(node) as NodeElementInfo;\r\n        return info.placeholderComment == node;\r\n    }\r\n    private getPlaceholderComment(info: NodeElementInfo) : Comment\r\n    {\r\n        if(info.placeholderComment)\r\n            return info.placeholderComment;\r\n        \r\n        info.placeholderComment = this.doc.createComment(\"_LiveDomId=\"+info.id);\r\n        this.setNodeInfo(info.placeholderComment, info);\r\n        return info.placeholderComment;\r\n    }\r\n    public renderChildNodes(parentNode: Node)\r\n    {\r\n        const t = nextId ++;\r\n        const nodes = [];\r\n        const l = parentNode.childNodes.length;\r\n        for(let i=0; i<l; ++i)\r\n            nodes.push(parentNode.childNodes[i]);\r\n        \r\n        for(let i=0; i<l; ++i)\r\n        {\r\n            const node = nodes[i];\r\n            const info = this.getNodeInfo(node);\r\n            if(!info)\r\n            {\r\n                if(node.nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                    this.renderChildNodes(node);\r\n                continue;\r\n            }\r\n            \r\n            if(info._t == t)\r\n                continue;\r\n            \r\n            info.render(node);\r\n            info._t = t;\r\n        }\r\n    }\r\n    \r\n    private setupText(text: Text)\r\n    {\r\n        const parseResult = Parser.parseText(text.data);\r\n        // console.log(\"buildNode parseText:\", parseResult, parseResult.exec({}));\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return ;\r\n        \r\n        const info: NodeTextInfo = {\r\n            id: 'LDT'+(nextId++),\r\n        };\r\n        \r\n        // console.log(\"buildNode:\", info, text);\r\n        info.render = (node: Text) =>\r\n        {\r\n            node.data = parseResult.exec(this.dataManager.data);\r\n        }\r\n        this.setNodeInfo(text, info);\r\n        // info.render(text);\r\n    }\r\n    \r\n    public cloneNode<N extends Node>(src: N): N\r\n    {\r\n        const des = src.cloneNode(true);\r\n        this.cloneNodesInfo([src], [des]);\r\n        return des as N;\r\n    }\r\n    private cloneNodesInfo(srcNodes: Node[]|NodeListOf<ChildNode>, desNodes: Node[]|NodeListOf<ChildNode>)\r\n    {\r\n        for(let i=0, l=srcNodes.length; i < l; ++i)\r\n        {\r\n            desNodes[i][propLiveInfo] = srcNodes[i][propLiveInfo];\r\n            \r\n            if(srcNodes[i].nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                this.cloneNodesInfo(srcNodes[i].childNodes, desNodes[i].childNodes);\r\n        }\r\n    }\r\n    \r\n    private setNodeInfo(node: Node, info: NodeInfo)\r\n    {\r\n        //weak map ?\r\n        //prop map ?\r\n        node[propLiveInfo] = info;\r\n    }\r\n    public getNodeInfo(node: Node) : NodeInfo\r\n    {\r\n        return node[propLiveInfo] || null;\r\n    }\r\n    private hasNodeInfo(node: Node) : boolean\r\n    {\r\n        return !!node[propLiveInfo];\r\n    }\r\n    private isLiveNode(node: Node) : boolean\r\n    {\r\n        return propLiveInfo in node;\r\n    }\r\n}\r\n\r\n\r\nfunction removeNode(node: Node)\r\n{\r\n    if(node.parentNode)\r\n        node.parentNode.removeChild(node);\r\n}\r\n\r\nfunction insertAfter(before: Node, node: Node)\r\n{\r\n    // console.log(\"insertAfter:\", before, node, before==node, !!before.nextSibling, !!node.parentNode);\r\n    if(before == node)\r\n        return ;\r\n    else if(before.nextSibling)\r\n        before.parentNode.insertBefore(node, before.nextSibling);\r\n    else\r\n        before.parentNode.appendChild(node);\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\n\r\n//TODO isUseMergeData() field1!==undefined || field1.field2!==undefined || ...\r\n\r\nexport type TextFunction<R=any> = (data: TypeData) => R;\r\n\r\ninterface ParseTextResult\r\n{\r\n    // vars: string[];\r\n    parts: (string|TextFunction)[];\r\n    // paths: {[k: string]: string[]};\r\n    exec(data: TypeData);\r\n}\r\n\r\nexport class Parser\r\n{\r\n    public static parseText(text: string) : ParseTextResult\r\n    {\r\n        const expressionRegex = /\\$\\{\\s*([a-zA-z_]\\w*(\\.\\w+)*)\\s*\\}/g;\r\n        // console.log(\"parseText:\", text.length, text.match(expressionRegex));\r\n        const parts: (string|TextFunction)[] = [];\r\n        let match: RegExpExecArray = null;\r\n        let lastIndex = 0;\r\n        \r\n        while(match = expressionRegex.exec(text))\r\n        {\r\n            if(lastIndex < match.index)\r\n                parts.push(text.substring(lastIndex, match.index));\r\n            \r\n            // console.log(\"parseText result:\", result, expressionRegex.lastIndex);\r\n            const names = match[1].split(/\\./g);\r\n            parts.push(buildTextFunction(names));\r\n            \r\n            lastIndex = expressionRegex.lastIndex;\r\n        }\r\n        \r\n        if(lastIndex < text.length)\r\n            parts.push(text.substring(lastIndex, text.length));\r\n        // console.log(\"parseText lastIndex:\", expressionRegex.lastIndex, parts);\r\n        \r\n        return {parts, exec: buildParseResultRenderer(parts)}; //TODO isUseMergeData()\r\n    }\r\n\r\n    public static hasTextExpress(result: ParseTextResult)\r\n    {\r\n        if(result.parts.length > 1)\r\n            return true;\r\n        \r\n        return result.parts.length == 1 && typeof(result.parts[0]) != \"string\";\r\n    }\r\n}\r\n\r\n\r\n// function getWatchVars(info: ParseTextExpressionInfo): string[]\r\n// {\r\n//     // return [info.var.replace(/\\s*\\.\\s*/g, \".\")];\r\n//     return info.var.split(/\\s*\\.\\s*/, 1).slice(0, 1);\r\n// }\r\n\r\nfunction buildTextFunction(names: string[]) : TextFunction\r\n{\r\n    let lastNamePath = \"\";\r\n    let namesPath = names.map((name) =>\r\n    {\r\n        lastNamePath = lastNamePath + \".\" + name;\r\n        return lastNamePath.substring(1);\r\n    });\r\n    \r\n    // let body = \"return data\" + names.map(name => '[\"'+name+'\"]').join(\"\") + \";\";\r\n    let body = `var ${names[0]}=data.${names[0]}; `\r\n            + `return (${namesPath.map(p => `${p}!==null&&${p}!==void 0`).join(\" && \")}) ? ${names.join(\".\")} : null;`;\r\n    \r\n    // console.log(\"buildTextRenderer:\", names, namesPath, body);\r\n    return new Function(\"data\", body) as TextFunction;\r\n}\r\n\r\nfunction buildParseResultRenderer(parts: (string|TextFunction)[])\r\n{\r\n    if(parts.length == 1 && typeof(parts[0]) == \"function\")\r\n    {\r\n        return parts[0];\r\n    }\r\n    \r\n    if(parts.length == 1 && typeof(parts[0]) == \"string\")\r\n    {\r\n        const text = parts[0];\r\n        return function() { return text; };\r\n    }\r\n    \r\n    return function(data: TypeData)\r\n    {\r\n        const results: string[] = [];\r\n        for(const p of parts)\r\n        {\r\n            if(typeof(p) == \"string\")\r\n                results.push(p);\r\n            else\r\n                results.push(p(data));\r\n        }\r\n        \r\n        // console.log(\"textNodeRenderer results:\", results, data);\r\n        return results.join(\"\");\r\n    };\r\n}\r\n\r\n\r\n\r\n","import LiveDom from \"./LiveDom\";\r\n\r\n// console.log(\">>>>>>>>>>>>> LiveDom:\", LiveDom);\r\n\r\n// export function testLiveDom()\r\n// {\r\n//     console.log(\">>>>>>>>>>>>> testLiveDom:\", LiveDom);\r\n    \r\n// }\r\n\r\n// window[\"LiveDom\"] = LiveDom;\r\n\r\nexport = LiveDom;\r\n"]}