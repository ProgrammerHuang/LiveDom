{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/DataManager.ts","src/Directive.ts","src/DirectiveElementEach.ts","src/DirectiveElementIf.ts","src/DirectiveElementRender.ts","src/DomScanner.ts","src/DomScannerLoaded.ts","src/LiveDom.ts","src/Page.ts","src/PageController.ts","src/Parser.ts","src/main.ts"],"names":["f","exports","module","define","amd","window","global","self","this","LiveDom","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","DataManager","initData","pageData","Object","create","scopeDataStack","data","prototype","mergePageData","assign","pushScopeData","scopeData","push","popScopeData","pop","getPrototypeOf","Directive","controller","_super","Directive_1","propLiveKeyData","Symbol","DirectiveElementEach","__extends","element","info","config","attrs","attr","attrInfo","removeAttribute","render","continueRender","elementInfo","items","exec","dataManager","Array","isArray","renderElements","l","item","keyVal","itemElement","exists","find","ele","indexOf","this_1","cloneNode","index","itemRenderElements","_this","DirectiveElementIf","DirectiveElementRender","attrName","attrVal","setAttribute","renderChildNodes","DomScanner","doc","options","ignoreElementTags","script","style","observer","MutationObserver","mutationObserverCallback","bind","mutationList","DomScanner_1","DomScannerLoaded","scan","scanPromise","Promise","resolve","reject","readyState","walkNode","documentElement","observe","subtree","childList","attributes","characterData","addEventListener","node","nodeType","processElement","processText","processComment","tagName","toLowerCase","processElementStart","childNodes","forEach","processElementEnd","elementStart","elementEnd","comment","text","apply","arguments","Page_1","PageController_1","initPage","PageController","document","createPage","page","Page","updateData","updatePageData","DomScannerLoaded_1","DirectiveElementRender_1","DirectiveElementEach_1","DataManager_1","DirectiveElementIf_1","Parser_1","propLiveInfo","nextId","scanCompletedPromise","requestRenderPagePromise","elementDirectivesConfig","scanner","scanElementStart","scanElementEnd","scanComment","scanText","then","loaded","requestRenderPage","removeNode","parentNode","removeChild","insertAfter","before","nextSibling","insertBefore","appendChild","renderElement","setupElement","setupText","id","placeholderComment","directives","setupAttribute","name","setupElementDirectives","keys","setNodeInfo","_i","_a","directive","parseResult","Parser","parseText","value","hasTextExpress","placeholder","getNodeInfo","nextNode","processElementDirectiveRender","getPlaceholderComment","exists_1","prev","renderElements_1","_b","exists_2","renderInfo","directiveIndex","createComment","nodes","_t","src","des","cloneNodesInfo","srcNodes","desNodes","hasNodeInfo","isLiveNode","expressionRegex","parts","match","lastIndex","substring","names","split","lastNamePath","namesPath","map","body","concat","join","Function","buildTextFunction","results","parts_1","text_1","buildParseResultRenderer","result","LiveDom_1","default"],"mappings":"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","file":"livedom.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nexport type TypeData = {[k: string]: any};\r\n\r\nexport class DataManager\r\n{\r\n    public data: TypeData;\r\n    public initData: TypeData;\r\n    public pageData: TypeData;\r\n    private scopeDataStack: TypeData[];\r\n\r\n    public constructor(initData: TypeData)\r\n    {\r\n        this.initData = initData;\r\n        this.pageData = Object.create(this.initData);\r\n\r\n        this.scopeDataStack = [];\r\n\r\n        this.data = Object.create(this.pageData);\r\n    }\r\n\r\n    public mergePageData(pageData: TypeData)\r\n    {\r\n        Object.assign(this.pageData, pageData);\r\n    }\r\n\r\n    public pushScopeData(scopeData: TypeData)\r\n    {\r\n        this.scopeDataStack.push(scopeData);\r\n        this.data = Object.create(this.data);\r\n        Object.assign(this.data, scopeData);\r\n    }\r\n    public popScopeData(scopeData: TypeData)\r\n    {\r\n        if (this.scopeDataStack[this.scopeDataStack.length - 1] != scopeData)\r\n            throw new Error(\"popScopeData fail! scopeData not last data.\");\r\n\r\n        this.scopeDataStack.pop();\r\n        this.data = Object.getPrototypeOf(this.data);\r\n    }\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { ElementRenderInfo, NodeInfo } from \"./NodeInfo\";\r\n\r\nexport interface DirectiveConfig<N extends Node = Node>\r\n{\r\n    attr?: string;\r\n    create: (controller: PageController, node: N, info: NodeInfo, config: DirectiveConfig<N>)=>Directive<N>|null;\r\n}\r\n\r\nexport interface DirectiveRender<N extends Node = Node>\r\n{\r\n    (element: N, renderInfo: ElementRenderInfo): N[];\r\n}\r\n// class DirectiveText extends Directive\r\n// {\r\n// }\r\n\r\n\r\nexport abstract class Directive<N extends Node = Node>\r\n{\r\n    // public name: string = null;\r\n    // public abstract buildNode(nodeInfo: NodeInfo, node: Node);\r\n    public abstract render(element: N, renderInfo: ElementRenderInfo, continueRender: DirectiveRender<N>): N[];\r\n    // public abstract unsetNode(nodeInfo: NodeInfo);\r\n    protected controller: PageController;\r\n    protected constructor(controller: PageController)\r\n    {\r\n        this.controller = controller;\r\n    }\r\n}\r\n\r\n// class DirectiveElementStateClass extends Directive //live-state=\"rendering|complete\"\r\n// {\r\n// }\r\n// class DirectiveElementContent extends Directive //live:cont\r\n// {\r\n// }\r\n\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nconst propLiveKeyData = Symbol(\"LiveDomKeyDataProp\");\r\n\r\nexport class DirectiveElementEach extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementEach\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n\r\n        const attrInfo = info.attrs[config.attr];\r\n\r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n\r\n        return new DirectiveElementEach(controller, element, attrInfo);\r\n    }\r\n\r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n\r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n\r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const items = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        // info.directivesVal[attrLiveEach] = items;\r\n        \r\n        if(!Array.isArray(items) || items.length == 0)\r\n            return [];\r\n        \r\n        let renderElements: Element[] = [];\r\n        for(let i=0, l=items.length; i<l; ++i)\r\n        {\r\n            const item = items[i];\r\n            // console.log(\"DirectiveElementEach item:\", item);\r\n            const keyVal = item; //TODO keyGetter(item), default return item\r\n            \r\n            // console.log(\"processElementEach itemElement from exists: \", info.exists.find((ele: Element) => ele[propLiveKeyData]==keyVal && renderElements.indexOf(ele)<0));\r\n            // const itemElement = this.controller.cloneNode(elementInfo.element);\r\n            const itemElement = info.exists.find((ele: Element) => propLiveKeyData in ele && ele[propLiveKeyData] == keyVal && renderElements.indexOf(ele) < 0) as Element ||\r\n                                this.controller.cloneNode(elementInfo.element);\r\n            itemElement[propLiveKeyData] = keyVal;\r\n            \r\n            const scopeData = { item, index: i };\r\n            this.controller.dataManager.pushScopeData(scopeData);\r\n            const itemRenderElements = continueRender(itemElement, info);\r\n            this.controller.dataManager.popScopeData(scopeData);\r\n            \r\n            if (itemRenderElements.length > 0)\r\n                renderElements.push(itemRenderElements[0]);\r\n        }\r\n\r\n        return renderElements;\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementIf extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementIf\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n\r\n        const attrInfo = info.attrs[config.attr];\r\n\r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n\r\n        return new DirectiveElementIf(controller, element, attrInfo);\r\n    }\r\n\r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n\r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n\r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const val = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        if (val)\r\n            return continueRender(element, info);\r\n\r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementRender extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementRender\r\n    {\r\n        return new DirectiveElementRender(controller);\r\n    }\r\n\r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementRender renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n\r\n        for (const attrName in elementInfo.attrs)\r\n        {\r\n            // if has custom element and xxxxx()\r\n            // else if attrVal != attr.value\r\n            const attrInfo = elementInfo.attrs[attrName];\r\n            const attrVal = attrInfo.exec(this.controller.dataManager.data);\r\n            // renderInfo.attrsVal[attrName] = attrVal;\r\n            element.setAttribute(attrName, attrVal);\r\n        }\r\n\r\n        this.controller.renderChildNodes(element);\r\n\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","\r\n\r\nexport interface DomScannerOptions\r\n{\r\n    elementStart(element: Element): void;\r\n    elementEnd(element: Element): void;\r\n    comment(comment: Comment): void;\r\n    text(text: Text): void;\r\n}\r\n\r\nexport abstract class DomScanner\r\n{\r\n    protected doc: Document;\r\n    protected observer: MutationObserver;\r\n    protected options: DomScannerOptions;\r\n    protected ignoreElementTags = {script: true, style: true};\r\n\r\n    public constructor(doc: Document, options: DomScannerOptions)\r\n    {\r\n        this.options = options;\r\n        this.doc = doc;\r\n        this.observer = new MutationObserver(this.mutationObserverCallback.bind(this));\r\n    }\r\n\r\n    public abstract scan(): Promise<void>;\r\n\r\n    private mutationObserverCallback(mutationList: MutationRecord[])\r\n    {\r\n        // console.log(\"mutationObserverCallback:\", mutationList);\r\n        // push into loading queue\r\n    }\r\n}\r\n","import { DomScanner } from \"./DomScanner\";\r\n\r\nexport class DomScannerLoaded extends DomScanner\r\n{\r\n    protected scanPromise: Promise<void> = null;\r\n\r\n    public scan(): Promise<void>\r\n    {\r\n        if (this.scanPromise)\r\n            return this.scanPromise;\r\n\r\n        return this.scanPromise = new Promise<void>((resolve, reject) =>\r\n        {\r\n            if (this.doc.readyState == \"complete\")\r\n            {\r\n                this.walkNode(this.doc.documentElement);\r\n                this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                resolve();\r\n            }\r\n\r\n            else\r\n            {\r\n                this.doc.addEventListener(\"DOMContentLoaded\", () =>\r\n                {\r\n                    this.walkNode(this.doc.documentElement);\r\n                    this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    protected walkNode(node: Node)\r\n    {\r\n        // console.log(\"walk node:\", node, this.isCompletedNode(node));\r\n        switch (node.nodeType)\r\n        {\r\n            case 1: //ELEMENT_NODE\r\n                this.processElement(node as Element);\r\n                break;\r\n            case 3: //TEXT_NODE\r\n                this.processText(node as Text);\r\n                break;\r\n            // case 4: //CDATA_SECTION_NODE\r\n            //     if(childInfo = initText(controller, node as Text))\r\n            //     {\r\n            //         info.watch = info.watch.concat(childInfo.watch);\r\n            //     }\r\n            //     break;\r\n            case 8: //COMMENT_NODE\r\n                this.processComment(node as Comment);\r\n                break;\r\n            // default : //Not support type\r\n            //     break;\r\n        }\r\n\r\n    }\r\n\r\n    protected processElement(element: Element)\r\n    {\r\n        // console.log(\"process element:\", element);\r\n        if (this.ignoreElementTags[element.tagName.toLowerCase()])\r\n            return;\r\n\r\n        // if(this.incompleteNodes.indexOf(element) < 0)\r\n        this.processElementStart(element);\r\n\r\n        element.childNodes.forEach((node: Node) =>\r\n        {\r\n            this.walkNode(node);\r\n        });\r\n\r\n        this.processElementEnd(element);\r\n    }\r\n\r\n    protected processElementStart(element: Element)\r\n    {\r\n        // console.log(\"processElementStart:\", element);\r\n        this.options.elementStart(element);\r\n    }\r\n    protected processElementEnd(element: Element)\r\n    {\r\n        // console.log(\"processElementEnd:\", element);\r\n        this.options.elementEnd(element);\r\n    }\r\n    protected processComment(node: Comment)\r\n    {\r\n        // console.log(\"processComment:\", node);\r\n        this.options.comment(node);\r\n    }\r\n    protected processText(node: Text)\r\n    {\r\n        // console.log(\"processText:\", node);\r\n        this.options.text(node);\r\n    }\r\n}\r\n","import { createPage, Page, PageOptions } from \"./Page\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport default class LiveDom\r\n{\r\n    public static initPage(options: PageOptions = {}) : Page\r\n    {\r\n        const controller = new PageController(document, options);\r\n        return createPage(controller);\r\n    }\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\nimport { PageController } from \"./PageController\";\r\n\r\n //TODO singleton for page, and life in doc\r\n\r\nexport interface PageOptions\r\n{\r\n    // container?: Element|string;\r\n    data?: TypeData; //init data\r\n    // directives?: MapObject<DirectiveOptions>;\r\n    loaded?: ()=>void;\r\n    // debug?: boolean;\r\n}\r\n\r\nexport function createPage(controller: PageController) : Page\r\n{\r\n    const page = new Page();\r\n    \r\n    page.updateData = controller.updatePageData.bind(controller);\r\n    // page.onReady = function(cb)\r\n    // {\r\n    //     controller.scanCompletedPromise.then(cb);\r\n    // }\r\n    \r\n    return page;\r\n}\r\n\r\nexport class Page\r\n{\r\n    public updateData: (data: TypeData) => Promise<void>;\r\n    // public onReady: (callback: ()=>void) => void;\r\n}\r\n\r\n","import { DomScanner } from \"./DomScanner\";\r\nimport { DomScannerLoaded } from \"./DomScannerLoaded\";\r\nimport { PageOptions } from \"./Page\";\r\nimport { Directive, DirectiveConfig } from \"./Directive\";\r\nimport { DirectiveElementRender } from \"./DirectiveElementRender\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DataManager, TypeData } from \"./DataManager\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { Parser } from \"./Parser\";\r\nimport { AttrInfo, ElementRenderInfo, NodeElementInfo, NodeInfo, NodeTextInfo } from \"./NodeInfo\";\r\n\r\n// WeakMap<Document, Map<NodeInfo>>\r\n\r\nconst propLiveInfo = Symbol(\"LiveDomInfoProp\");\r\nconst attrLiveName = \"_ld\";\r\nconst attrLiveEach = \"live:each\";\r\nconst attrLiveIf = \"live:if\";\r\nconst attrLiveElse = \"live:else\";\r\nlet nextId = 1001;\r\n\r\nexport class PageController\r\n{\r\n    public doc: Document;\r\n    public options: PageOptions;\r\n    public dataManager: DataManager;\r\n    public scanCompletedPromise: Promise<void> = null;\r\n    \r\n    private scanner: DomScanner;\r\n    private elementDirectivesConfig: DirectiveConfig<Element>[];\r\n    // private directiveText: DirectiveText;\r\n    // private nodeInfos: MapObject<NodeInfo>;\r\n    private requestRenderPagePromise: Promise<void> = null;\r\n    \r\n    public constructor(doc: Document, options: PageOptions)\r\n    {\r\n        this.doc = doc;\r\n        this.options = options;\r\n        this.dataManager = new DataManager(options.data || {});\r\n        this.elementDirectivesConfig = [\r\n            {attr: attrLiveEach, create: DirectiveElementEach.create, },\r\n            {attr: attrLiveIf, create: DirectiveElementIf.create, },\r\n            {attr: null, create: DirectiveElementRender.create, },\r\n        ];\r\n        // this.directiveText = new DirectiveText();\r\n        // this.nodeInfos = {};\r\n        \r\n        this.scanner = new DomScannerLoaded(document, {\r\n            elementStart: this.scanElementStart.bind(this),\r\n            elementEnd: this.scanElementEnd.bind(this),\r\n            comment: this.scanComment.bind(this),\r\n            text: this.scanText.bind(this),\r\n        });\r\n        \r\n        this.scanCompletedPromise = this.scanner.scan().\r\n        then(() =>\r\n        {\r\n            if(this.options.loaded)\r\n                this.options.loaded();\r\n            \r\n            this.requestRenderPage();\r\n        });\r\n    }\r\n    \r\n    public updatePageData(data: TypeData = {}) : Promise<void>\r\n    {\r\n        // console.log(\"updatePageData:\", data);\r\n        this.dataManager.mergePageData(data);\r\n        return this.requestRenderPage();\r\n    }\r\n    private requestRenderPage() : Promise<void>\r\n    {\r\n        if(this.requestRenderPagePromise)\r\n            return this.requestRenderPagePromise;\r\n        \r\n        return this.requestRenderPagePromise = this.scanCompletedPromise.\r\n        then(() =>\r\n        {\r\n            this.requestRenderPagePromise = null;\r\n            this.renderElement(this.doc.documentElement);\r\n        });\r\n    }\r\n    \r\n    private scanElementStart(element: Element) : void\r\n    {\r\n        // console.log(\"elementStart:\", element);\r\n        this.setupElement(element);\r\n    }\r\n    private scanElementEnd(element: Element) : void\r\n    {\r\n        // this.renderElement(element);\r\n    }\r\n    private scanComment(comment: Comment) : void\r\n    {\r\n        // console.log(\"comment:\", comment);\r\n    }\r\n    private scanText(text: Text) : void\r\n    {\r\n        // console.log(\"text:\", text);\r\n        this.setupText(text);\r\n    }\r\n    \r\n    private setupElement(element: Element)\r\n    {\r\n        const info: NodeElementInfo = {\r\n            id: 'LDE'+(nextId++),\r\n            element,\r\n            placeholderComment: null,\r\n            attrs: {},\r\n            directives: [],\r\n        };\r\n        \r\n        // console.log(\"DirectiveElement build node:\", nodeInfo, node);\r\n        const attrs = element.attributes;\r\n        for(let i=attrs.length-1; i>=0; --i)\r\n        {\r\n            const attr = attrs[i];\r\n            const attrInfo = this.setupAttribute(attr);\r\n            // console.log(\"initElement attribute:\", attr, attrInfo);\r\n            if(attrInfo)\r\n            {\r\n                info.attrs[attr.name] = attrInfo;\r\n                // attr.value = attrInfo.exec(this.data);\r\n            }\r\n        }\r\n        \r\n        this.setupElementDirectives(element, info);\r\n        \r\n        if(Object.keys(info.attrs).length == 0 && Object.keys(info.directives).length == 0)\r\n        {\r\n            this.setNodeInfo(element, null);\r\n            return ;\r\n        }\r\n        \r\n        info.render = this.renderElement.bind(this);\r\n        this.setNodeInfo(element, info);\r\n    }\r\n    private setupElementDirectives(element: Element, info: NodeElementInfo)\r\n    {\r\n        for(const config of this.elementDirectivesConfig)\r\n        {\r\n            const directive = config.create(this, element, info, config);\r\n            if(directive)\r\n                info.directives.push(directive);\r\n        }\r\n    }\r\n    private setupAttribute(attr: Attr) : AttrInfo\r\n    {\r\n        const parseResult = Parser.parseText(attr.value);\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return null;\r\n        \r\n        return {\r\n            exec: parseResult.exec,\r\n        };\r\n    }\r\n    private renderElement(placeholder: Element)\r\n    {\r\n        const elementInfo = this.getNodeInfo(placeholder) as NodeElementInfo;\r\n        // console.log(\"renderElement:\", placeholder, this.isLiveNode(placeholder), elementInfo);\r\n        if(! elementInfo)\r\n        {\r\n            this.renderChildNodes(placeholder);\r\n            return ;\r\n        }\r\n        \r\n        const exists: Node[] = [placeholder];\r\n        let nextNode = placeholder.nextSibling;\r\n        while(nextNode)\r\n        {\r\n            const nextInfo = this.getNodeInfo(nextNode);\r\n            if(nextInfo != elementInfo)\r\n                break;\r\n            \r\n            exists.push(nextNode);\r\n            nextNode = nextNode.nextSibling;\r\n        }\r\n        \r\n        const renderInfo: ElementRenderInfo = {\r\n            elementInfo,\r\n            exists,\r\n            // attrsVal: {}, //TODO no use\r\n        };\r\n        \r\n        const element = placeholder.nodeType==1 ? placeholder as Element : elementInfo.element;\r\n        const renderElements = this.processElementDirectiveRender(element, renderInfo, 0);\r\n        // console.log(\"renderElement renderElements:\", element, renderElements, renderInfo);\r\n        if(renderElements.length == 0)\r\n        {\r\n            // console.log(\"renderElement renderElements remove:\", exists.length, element.parentNode, element);\r\n            const placeholderComment = this.getPlaceholderComment(elementInfo);\r\n            insertAfter(placeholder, placeholderComment);\r\n            for(const ele of exists)\r\n            {\r\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>\", ele.parentNode, ele);\r\n                if(ele != placeholderComment)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let prev = placeholder;\r\n            for(const ele of renderElements)\r\n            {\r\n                insertAfter(prev, ele);\r\n                prev = ele;\r\n            }\r\n            \r\n            for(const ele of exists)\r\n            {\r\n                if(renderElements.indexOf(ele as Element) < 0)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n    }\r\n    private processElementDirectiveRender(element: Element, renderInfo: ElementRenderInfo, directiveIndex: number) : Element[]\r\n    {\r\n        const directives = renderInfo.elementInfo.directives;\r\n        \r\n        if(directiveIndex < directives.length)\r\n        {\r\n            return directives[directiveIndex].render(\r\n                element,\r\n                renderInfo, \r\n                (ele: Element, info: ElementRenderInfo) => this.processElementDirectiveRender(ele, info, directiveIndex+1)\r\n            );\r\n        }\r\n        \r\n        return [element];\r\n    }\r\n    private getPlaceholderComment(info: NodeElementInfo) : Comment\r\n    {\r\n        if(info.placeholderComment)\r\n            return info.placeholderComment;\r\n        \r\n        info.placeholderComment = this.doc.createComment(\"_LiveDomId=\"+info.id);\r\n        this.setNodeInfo(info.placeholderComment, info);\r\n        return info.placeholderComment;\r\n    }\r\n    public renderChildNodes(parentNode: Node)\r\n    {\r\n        const t = nextId ++;\r\n        const nodes = [];\r\n        const l = parentNode.childNodes.length;\r\n        for(let i=0; i<l; ++i)\r\n            nodes.push(parentNode.childNodes[i]);\r\n        \r\n        for(let i=0; i<l; ++i)\r\n        {\r\n            const node = nodes[i];\r\n            const info = this.getNodeInfo(node);\r\n            if(!info)\r\n            {\r\n                if(node.nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                    this.renderChildNodes(node);\r\n                continue;\r\n            }\r\n            \r\n            if(info._t == t)\r\n                continue;\r\n            \r\n            info.render(node);\r\n            info._t = t;\r\n        }\r\n    }\r\n    \r\n    private setupText(text: Text)\r\n    {\r\n        const parseResult = Parser.parseText(text.data);\r\n        // console.log(\"buildNode parseText:\", parseResult, parseResult.exec({}));\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return ;\r\n        \r\n        const info: NodeTextInfo = {\r\n            id: 'LDT'+(nextId++),\r\n        };\r\n        \r\n        // console.log(\"buildNode:\", info, text);\r\n        info.render = (node: Text) =>\r\n        {\r\n            node.data = parseResult.exec(this.dataManager.data);\r\n        }\r\n        this.setNodeInfo(text, info);\r\n        // info.render(text);\r\n    }\r\n    \r\n    public cloneNode<N extends Node>(src: N): N\r\n    {\r\n        const des = src.cloneNode(true);\r\n        this.cloneNodesInfo([src], [des]);\r\n        return des as N;\r\n    }\r\n    private cloneNodesInfo(srcNodes: Node[]|NodeListOf<ChildNode>, desNodes: Node[]|NodeListOf<ChildNode>)\r\n    {\r\n        for(let i=0, l=srcNodes.length; i < l; ++i)\r\n        {\r\n            desNodes[i][propLiveInfo] = srcNodes[i][propLiveInfo];\r\n            \r\n            if(srcNodes[i].nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                this.cloneNodesInfo(srcNodes[i].childNodes, desNodes[i].childNodes);\r\n        }\r\n    }\r\n    \r\n    private setNodeInfo(node: Node, info: NodeInfo)\r\n    {\r\n        //weak map ?\r\n        //prop map ?\r\n        node[propLiveInfo] = info;\r\n    }\r\n    private getNodeInfo(node: Node) : NodeInfo\r\n    {\r\n        return node[propLiveInfo] || null;\r\n    }\r\n    private hasNodeInfo(node: Node) : boolean\r\n    {\r\n        return !!node[propLiveInfo];\r\n    }\r\n    private isLiveNode(node: Node) : boolean\r\n    {\r\n        return propLiveInfo in node;\r\n    }\r\n}\r\n\r\n\r\nfunction removeNode(node: Node)\r\n{\r\n    if(node.parentNode)\r\n        node.parentNode.removeChild(node);\r\n}\r\n\r\nfunction insertAfter(before: Node, node: Node)\r\n{\r\n    // console.log(\"insertAfter:\", before, node, before==node, !!before.nextSibling, !!node.parentNode);\r\n    if(before == node)\r\n        return ;\r\n    else if(before.nextSibling)\r\n        before.parentNode.insertBefore(node, before.nextSibling);\r\n    else\r\n        before.parentNode.appendChild(node);\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\n\r\nexport type TextFunction<R=any> = (data: TypeData) => R;\r\n\r\ninterface ParseTextResult\r\n{\r\n    // vars: string[];\r\n    parts: (string|TextFunction)[];\r\n    exec(data: TypeData);\r\n}\r\n\r\nexport class Parser\r\n{\r\n    public static parseText(text: string) : ParseTextResult\r\n    {\r\n        const expressionRegex = /\\$\\{\\s*([a-zA-z_]\\w*(\\.\\w+)*)\\s*\\}/g;\r\n        // console.log(\"parseText:\", text.length, text.match(expressionRegex));\r\n        const parts: (string|TextFunction)[] = [];\r\n        let match: RegExpExecArray = null;\r\n        let lastIndex = 0;\r\n        \r\n        while(match = expressionRegex.exec(text))\r\n        {\r\n            if(lastIndex < match.index)\r\n                parts.push(text.substring(lastIndex, match.index));\r\n            \r\n            // console.log(\"parseText result:\", result, expressionRegex.lastIndex);\r\n            const names = match[1].split(/\\./g);\r\n            parts.push(buildTextFunction(names));\r\n            \r\n            lastIndex = expressionRegex.lastIndex;\r\n        }\r\n        \r\n        if(lastIndex < text.length)\r\n            parts.push(text.substring(lastIndex, text.length));\r\n        // console.log(\"parseText lastIndex:\", expressionRegex.lastIndex, parts);\r\n        \r\n        return {parts, exec: buildParseResultRenderer(parts)};\r\n    }\r\n\r\n    public static hasTextExpress(result: ParseTextResult)\r\n    {\r\n        if(result.parts.length > 1)\r\n            return true;\r\n        \r\n        return result.parts.length == 1 && typeof(result.parts[0]) != \"string\";\r\n    }\r\n}\r\n\r\n\r\n// function getWatchVars(info: ParseTextExpressionInfo): string[]\r\n// {\r\n//     // return [info.var.replace(/\\s*\\.\\s*/g, \".\")];\r\n//     return info.var.split(/\\s*\\.\\s*/, 1).slice(0, 1);\r\n// }\r\n\r\nfunction buildTextFunction(names: string[]) : TextFunction\r\n{\r\n    let lastNamePath = \"\";\r\n    let namesPath = names.map((name) =>\r\n    {\r\n        lastNamePath = lastNamePath + \".\" + name;\r\n        return lastNamePath.substring(1);\r\n    });\r\n    \r\n    // let body = \"return data\" + names.map(name => '[\"'+name+'\"]').join(\"\") + \";\";\r\n    let body = `var ${names[0]}=data.${names[0]}; `\r\n            + `return (${namesPath.map(p => `${p}!==null&&${p}!==void 0`).join(\" && \")}) ? ${names.join(\".\")} : null;`;\r\n    \r\n    // console.log(\"buildTextRenderer:\", names, namesPath, body);\r\n    return new Function(\"data\", body) as TextFunction;\r\n}\r\n\r\nfunction buildParseResultRenderer(parts: (string|TextFunction)[])\r\n{\r\n    if(parts.length == 1 && typeof(parts[0]) == \"function\")\r\n    {\r\n        return parts[0];\r\n    }\r\n    \r\n    if(parts.length == 1 && typeof(parts[0]) == \"string\")\r\n    {\r\n        const text = parts[0];\r\n        return function() { return text; };\r\n    }\r\n    \r\n    return function(data: TypeData)\r\n    {\r\n        const results: string[] = [];\r\n        for(const p of parts)\r\n        {\r\n            if(typeof(p) == \"string\")\r\n                results.push(p);\r\n            else\r\n                results.push(p(data));\r\n        }\r\n        \r\n        // console.log(\"textNodeRenderer results:\", results, data);\r\n        return results.join(\"\");\r\n    };\r\n}\r\n\r\n\r\n\r\n","import LiveDom from \"./LiveDom\";\r\n\r\n// console.log(\">>>>>>>>>>>>> LiveDom:\", LiveDom);\r\n\r\n// export function testLiveDom()\r\n// {\r\n//     console.log(\">>>>>>>>>>>>> testLiveDom:\", LiveDom);\r\n    \r\n// }\r\n\r\n// window[\"LiveDom\"] = LiveDom;\r\n\r\nexport = LiveDom;\r\n"]}