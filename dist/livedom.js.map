{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/DataManager.ts","src/Directive.ts","src/DirectiveElementEach.ts","src/DirectiveElementElse.ts","src/DirectiveElementIf.ts","src/DirectiveElementRender.ts","src/DirectiveHtmlInputRender.ts","src/DomScanner.ts","src/DomScannerLoaded.ts","src/LiveDom.ts","src/Page.ts","src/PageController.ts","src/Parser.ts","src/main.ts"],"names":["f","exports","module","define","amd","window","global","self","this","LiveDom","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","DataManager","initData","topData","scopeDataStack","lastMergeData","pageData","Object","create","data","mergePageData","prototype","newData","assign","commitMergeData","hasUseLastMergeData","paths","pushScopeData","scopeData","push","popScopeData","pop","getPrototypeOf","Directive","controller","hasDirective","_info","info","directives","Array","isArray","_i","_a","_super","Directive_1","propLiveKeyData","Symbol","DirectiveElementEach","__extends","setup","element","config","attrs","attr","directive","removeAttribute","hasAttribute","itemName","getAttribute","indexName","render","continueRender","elementInfo","items","attrInfo","exec","dataManager","renderElements","l","item","keyVal","itemElement","exists","find","ele","indexOf","this_1","cloneNode","itemRenderElements","_this","DirectiveElementEach_1","DirectiveElementIf_1","DirectiveElementElse","prevNode","previousSibling","isPlaceholder","prevNodeInfo","getNodeInfo","DirectiveElementIf","nodeType","DirectiveElementRender","attrName","attrVal","setAttribute","renderChildNodes","DirectiveHtmlInputRender","tagName","toLocaleLowerCase","value","checked","keys","val","DomScanner","doc","options","ignoreElementTags","script","style","observer","MutationObserver","mutationObserverCallback","bind","startObserve","observe","documentElement","subtree","childList","attributes","characterData","records","DomScanner_1","DomScannerLoaded","scan","scanPromise","Promise","resolve","reject","readyState","walkNode","addEventListener","node","processElement","processText","processComment","toLowerCase","processElementStart","childNodes","forEach","processElementEnd","elementStart","elementEnd","comment","text","apply","arguments","Page_1","PageController_1","initPage","PageController","document","createPage","page","Page","updateData","updatePageData","DomScannerLoaded_1","Parser_1","DataManager_1","DirectiveElementRender_1","DirectiveElementElse_1","DirectiveHtmlInputRender_1","propLiveInfo","nextId","scanCompletedPromise","requestRenderPagePromise","elementDirectivesConfig","scanner","scanElementStart","scanElementEnd","scanComment","scanText","textChanged","onTextChanged","then","onPageSetupCompleted","requestRenderPage","removeNode","parentNode","removeChild","insertAfter","before","nextSibling","insertBefore","appendChild","ms","setTimeout","renderElement","setupElement","setupText","id","placeholderComment","setElementAttributes","setupElementDirectives","setNodeInfo","name","srcVal","setupAttribute","parseResult","Parser","parseText","hasTextExpress","placeholder","nextNode","processElementDirectiveRender","getPlaceholderComment","exists_1","prev","renderElements_1","_b","exists_2","renderInfo","directiveIndex","createComment","nodes","_t","textExec","src","des","cloneNodesInfo","srcNodes","desNodes","hasNodeInfo","isLiveNode","expressionRegex","parts","match","lastIndex","index","substring","names","split","lastNamePath","namesPath","map","body","concat","join","Function","buildTextFunction","results","parts_1","text_1","buildParseResultRenderer","result","LiveDom_1","default"],"mappings":"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","file":"livedom.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nexport type TypeData = {[k: string]: any};\r\nexport type DataPaths = {[path: string]: string[]};\r\n\r\nexport class DataManager\r\n{\r\n    public data: TypeData;\r\n    public topData: TypeData;\r\n    public pageData: TypeData;\r\n    public lastMergeData: TypeData;\r\n    private scopeDataStack: TypeData[];\r\n    \r\n    public constructor(initData: TypeData)\r\n    {\r\n        this.topData = {};\r\n        this.scopeDataStack = [];\r\n        this.lastMergeData = {};\r\n        \r\n        this.pageData = Object.create(this.topData);\r\n        this.data = Object.create(this.pageData);\r\n        \r\n        this.mergePageData(initData);\r\n    }\r\n    \r\n    public mergePageData(newData: TypeData)\r\n    {\r\n        Object.assign(this.lastMergeData, newData);\r\n        Object.assign(this.pageData, newData);\r\n    }\r\n    public commitMergeData() //like transaction commit\r\n    {\r\n        this.lastMergeData = {};\r\n    }\r\n    public hasUseLastMergeData(paths: DataPaths): boolean\r\n    {\r\n        for(const p in paths)\r\n        {\r\n            if(paths[p][0] in this.lastMergeData)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    // public hasUseLastMergeDataDeep(paths: DataPaths): boolean\r\n    // {\r\n    // }\r\n    \r\n    public pushScopeData(scopeData: TypeData)\r\n    {\r\n        this.scopeDataStack.push(scopeData);\r\n        this.data = Object.create(this.data);\r\n        Object.assign(this.data, scopeData);\r\n    }\r\n    public popScopeData(scopeData: TypeData)\r\n    {\r\n        if (this.scopeDataStack[this.scopeDataStack.length - 1] != scopeData)\r\n            throw new Error(\"popScopeData fail! scopeData not last data.\");\r\n        \r\n        this.scopeDataStack.pop();\r\n        this.data = Object.getPrototypeOf(this.data);\r\n    }\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { ElementRenderInfo, NodeElementInfo, NodeInfo } from \"./NodeInfo\";\r\n\r\nexport interface DirectiveConfig<N extends Node = Node>\r\n{\r\n    attr?: string;\r\n    setup: (controller: PageController, node: N, info: NodeInfo, config: DirectiveConfig<N>)=>void;\r\n}\r\n\r\nexport interface DirectiveRender<N extends Node = Node>\r\n{\r\n    (element: N, renderInfo: ElementRenderInfo): N[];\r\n}\r\n// class DirectiveText extends Directive\r\n// {\r\n// }\r\n\r\n\r\nexport abstract class Directive<N extends Node = Node>\r\n{\r\n    public static hasDirective(_info: NodeInfo) : boolean\r\n    {\r\n        const info = _info as NodeElementInfo;\r\n        \r\n        if(!info.directives || !Array.isArray(info.directives))\r\n            return false;\r\n        \r\n        for(const d of info.directives)\r\n        {\r\n            if(d instanceof this)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    // public name: string = null;\r\n    // public abstract buildNode(nodeInfo: NodeInfo, node: Node);\r\n    public abstract render(element: N, renderInfo: ElementRenderInfo, continueRender: DirectiveRender<N>): N[];\r\n    // public abstract unsetNode(nodeInfo: NodeInfo);\r\n    protected controller: PageController;\r\n    protected constructor(controller: PageController)\r\n    {\r\n        this.controller = controller;\r\n    }\r\n}\r\n\r\n// class DirectiveElementStateClass extends Directive //live-state=\"rendering|complete\"\r\n// {\r\n// }\r\n// class DirectiveElementContent extends Directive //live:cont\r\n// {\r\n// }\r\n\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nconst propLiveKeyData = Symbol(\"LiveDomKeyDataProp\");\r\n\r\nexport class DirectiveElementEach extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return ;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        const directive = new DirectiveElementEach(controller, element, attrInfo);\r\n        \r\n        element.removeAttribute(config.attr);\r\n        info.attrs[config.attr].directive = directive;\r\n        \r\n        if(element.hasAttribute(\"live:item\"))\r\n        {\r\n            directive.itemName = element.getAttribute(\"live:item\");\r\n            element.removeAttribute(\"live:item\");\r\n        }\r\n        \r\n        if(element.hasAttribute(\"live:index\"))\r\n        {\r\n            directive.indexName = element.getAttribute(\"live:index\");\r\n            element.removeAttribute(\"live:index\");\r\n        }\r\n        \r\n        info.directives.push(directive);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    private itemName: string = \"item\";\r\n    private indexName: string = \"index\";\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const items = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        // info.directivesVal[attrLiveEach] = items;\r\n        \r\n        if(!Array.isArray(items) || items.length == 0)\r\n            return [];\r\n        \r\n        let renderElements: Element[] = [];\r\n        for(let i=0, l=items.length; i<l; ++i)\r\n        {\r\n            const item = items[i];\r\n            // console.log(\"DirectiveElementEach item:\", item);\r\n            const keyVal = item; //TODO keyGetter(item), default return item\r\n            \r\n            // console.log(\"processElementEach itemElement from exists: \", info.exists.find((ele: Element) => ele[propLiveKeyData]==keyVal && renderElements.indexOf(ele)<0));\r\n            // const itemElement = this.controller.cloneNode(elementInfo.element);\r\n            const itemElement = info.exists.find((ele: Element) => propLiveKeyData in ele && ele[propLiveKeyData] == keyVal && renderElements.indexOf(ele) < 0) as Element ||\r\n                                this.controller.cloneNode(elementInfo.element);\r\n            itemElement[propLiveKeyData] = keyVal;\r\n            \r\n            const scopeData = { [this.itemName]: item, [this.indexName]: i };\r\n            this.controller.dataManager.pushScopeData(scopeData);\r\n            const itemRenderElements = continueRender(itemElement, info);\r\n            this.controller.dataManager.popScopeData(scopeData);\r\n            \r\n            if (itemRenderElements.length > 0)\r\n                renderElements.push(itemRenderElements[0]);\r\n        }\r\n\r\n        return renderElements;\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementElse extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if (!element.hasAttribute(config.attr))\r\n            return ;\r\n        \r\n        const directive = new DirectiveElementElse(controller, element);\r\n        element.removeAttribute(config.attr);\r\n        \r\n        if(info.attrs[config.attr])\r\n            info.attrs[config.attr].directive = directive;\r\n        \r\n        info.directives.push(directive);\r\n    }\r\n    \r\n    // private element: Element;\r\n    protected constructor(controller: PageController, element: Element)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementElse renderNode:\", element, element.previousElementSibling, info);\r\n        let prevNode: Node = info.exists[0];\r\n        while(prevNode = prevNode.previousSibling)\r\n        {\r\n            if(this.controller.isPlaceholder(prevNode))\r\n            {\r\n                const prevNodeInfo = this.controller.getNodeInfo(prevNode);\r\n                if(DirectiveElementIf.hasDirective(prevNodeInfo) || DirectiveElementEach.hasDirective(prevNodeInfo))\r\n                    return continueRender(element, info);\r\n                \r\n                break;\r\n            }\r\n            \r\n            if(prevNode.nodeType == 1) //1: Node.ELEMENT_NODE\r\n                break;\r\n        }\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementIf extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return ;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        const directive = new DirectiveElementIf(controller, element, attrInfo);\r\n        \r\n        element.removeAttribute(config.attr);\r\n        info.attrs[config.attr].directive = directive;\r\n        info.directives.push(directive);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const val = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        if (val)\r\n            return continueRender(element, info);\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementRender extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        const directive = new DirectiveElementRender(controller);\r\n        info.directives.push(directive);\r\n    }\r\n\r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementRender renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n\r\n        for (const attrName in elementInfo.attrs)\r\n        {\r\n            // if has custom element and xxxxx()\r\n            // else if attrVal != attr.value\r\n            const attrInfo = elementInfo.attrs[attrName];\r\n            if(attrInfo.directive)\r\n                continue ;\r\n            \r\n            const attrVal = attrInfo.exec(this.controller.dataManager.data);\r\n            // renderInfo.attrsVal[attrName] = attrVal;\r\n            element.setAttribute(attrName, attrVal);\r\n        }\r\n        \r\n        this.controller.renderChildNodes(element);\r\n        \r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo, AttrInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\ntype AttrsInfoMap = {[name: string]: AttrInfo};\r\n\r\nexport class DirectiveHtmlInputRender extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if(element.tagName.toLocaleLowerCase() != \"input\")\r\n            return null;\r\n        \r\n        const attrs: AttrsInfoMap = {};\r\n        \r\n        if(element.hasAttribute(\"value\") && info.attrs.value)\r\n        {\r\n            attrs.value = info.attrs.value;\r\n            element.removeAttribute(\"value\");\r\n            delete info.attrs.value;\r\n        }\r\n        \r\n        if(element.hasAttribute(\"checked\") && info.attrs.checked)\r\n        {\r\n            attrs.checked = info.attrs.checked;\r\n            element.removeAttribute(\"checked\");\r\n            delete info.attrs.checked;\r\n        }\r\n        \r\n        if(Object.keys(attrs).length > 0)\r\n        {\r\n            info.directives.push(new DirectiveHtmlInputRender(controller, element, attrs));\r\n        }\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrs: AttrsInfoMap;\r\n\r\n    protected constructor(controller: PageController, element: Element, attrs: AttrsInfoMap)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrs = attrs;\r\n    }\r\n\r\n    public render(element: HTMLInputElement, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        \r\n        if(this.attrs.value && this.controller.dataManager.hasUseLastMergeData(this.attrs.value.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.value.exec(this.controller.dataManager.data);\r\n            element.setAttribute(\"value\", val);\r\n            element.value = val;\r\n        }\r\n        \r\n        if(this.attrs.checked && this.controller.dataManager.hasUseLastMergeData(this.attrs.checked.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.checked.exec(this.controller.dataManager.data);\r\n            // element.setAttribute(\"value\", val);\r\n            element.checked = !!val;\r\n        }\r\n        \r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","\r\n\r\nexport interface DomScannerOptions\r\n{\r\n    elementStart(element: Element): void;\r\n    elementEnd(element: Element): void;\r\n    comment(comment: Comment): void;\r\n    text(text: Text): void;\r\n    textChanged(text: Text): void;\r\n}\r\n\r\nexport abstract class DomScanner\r\n{\r\n    protected doc: Document;\r\n    protected observer: MutationObserver;\r\n    protected options: DomScannerOptions;\r\n    protected ignoreElementTags = {script: true, style: true};\r\n\r\n    public constructor(doc: Document, options: DomScannerOptions)\r\n    {\r\n        this.options = options;\r\n        this.doc = doc;\r\n        this.observer = new MutationObserver(this.mutationObserverCallback.bind(this));\r\n    }\r\n    \r\n    public abstract scan(): Promise<void>;\r\n    protected abstract walkNode(node: Node) : void;\r\n    \r\n    protected startObserve()\r\n    {\r\n        this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n    }\r\n    private mutationObserverCallback(records: MutationRecord[])\r\n    {\r\n        // console.log(\"mutationObserverCallback:\", records);\r\n        // for(const record of records)\r\n        // {\r\n        //     console.log(\"mutationObserver\", record.type, record.target, record.addedNodes, record.removedNodes);\r\n        //     switch(record.type)\r\n        //     {\r\n        //     case \"characterData\":\r\n        //         this.options.textChanged(record.target as Text);\r\n        //         break;\r\n                \r\n        //     case \"childList\": \r\n        //         record.addedNodes.forEach((node) =>\r\n        //         {\r\n        //             this.walkNode(node);\r\n        //         });\r\n        //         break;\r\n        //     }\r\n        // }\r\n    }\r\n}\r\n","import { DomScanner } from \"./DomScanner\";\r\n\r\nexport class DomScannerLoaded extends DomScanner\r\n{\r\n    protected scanPromise: Promise<void> = null;\r\n\r\n    public scan(): Promise<void>\r\n    {\r\n        if (this.scanPromise)\r\n            return this.scanPromise;\r\n        \r\n        return this.scanPromise = new Promise<void>((resolve, reject) =>\r\n        {\r\n            if (this.doc.readyState == \"complete\")\r\n            {\r\n                this.walkNode(this.doc.documentElement);\r\n                this.startObserve();\r\n                resolve();\r\n            }\r\n            else\r\n            {\r\n                this.doc.addEventListener(\"DOMContentLoaded\", () =>\r\n                {\r\n                    this.walkNode(this.doc.documentElement);\r\n                    this.startObserve();\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    protected walkNode(node: Node)\r\n    {\r\n        // console.log(\"walk node:\", node, this.isCompletedNode(node));\r\n        switch (node.nodeType)\r\n        {\r\n            case 1: //ELEMENT_NODE\r\n                this.processElement(node as Element);\r\n                break;\r\n            case 3: //TEXT_NODE\r\n                this.processText(node as Text);\r\n                break;\r\n            // case 4: //CDATA_SECTION_NODE\r\n            //     if(childInfo = initText(controller, node as Text))\r\n            //     {\r\n            //         info.watch = info.watch.concat(childInfo.watch);\r\n            //     }\r\n            //     break;\r\n            case 8: //COMMENT_NODE\r\n                this.processComment(node as Comment);\r\n                break;\r\n            // default : //Not support type\r\n            //     break;\r\n        }\r\n        \r\n    }\r\n    \r\n    protected processElement(element: Element)\r\n    {\r\n        // console.log(\"process element:\", element);\r\n        if (this.ignoreElementTags[element.tagName.toLowerCase()])\r\n            return;\r\n\r\n        // if(this.incompleteNodes.indexOf(element) < 0)\r\n        this.processElementStart(element);\r\n\r\n        element.childNodes.forEach((node: Node) =>\r\n        {\r\n            this.walkNode(node);\r\n        });\r\n\r\n        this.processElementEnd(element);\r\n    }\r\n\r\n    protected processElementStart(element: Element)\r\n    {\r\n        // console.log(\"processElementStart:\", element);\r\n        this.options.elementStart(element);\r\n    }\r\n    protected processElementEnd(element: Element)\r\n    {\r\n        // console.log(\"processElementEnd:\", element);\r\n        this.options.elementEnd(element);\r\n    }\r\n    protected processComment(node: Comment)\r\n    {\r\n        // console.log(\"processComment:\", node);\r\n        this.options.comment(node);\r\n    }\r\n    protected processText(node: Text)\r\n    {\r\n        // console.log(\"processText:\", node);\r\n        this.options.text(node);\r\n    }\r\n}\r\n","import { createPage, Page, PageOptions } from \"./Page\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport default class LiveDom\r\n{\r\n    public static initPage(options: PageOptions = {}) : Page\r\n    {\r\n        const controller = new PageController(document, options);\r\n        return createPage(controller);\r\n    }\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\nimport { PageController } from \"./PageController\";\r\n\r\n //TODO singleton for page, and life in doc\r\n\r\nexport interface PageOptions\r\n{\r\n    // container?: Element|string;\r\n    data?: TypeData; //init data\r\n    // directives?: MapObject<DirectiveOptions>;\r\n    onPageSetupCompleted?: ()=>void;\r\n    // debug?: boolean;\r\n}\r\n\r\nexport function createPage(controller: PageController) : Page\r\n{\r\n    const page = new Page();\r\n    \r\n    page.updateData = controller.updatePageData.bind(controller);\r\n    \r\n    return page;\r\n}\r\n\r\nexport class Page\r\n{\r\n    public updateData: (data: TypeData) => Promise<void>;\r\n    // public onReady: (callback: ()=>void) => void;\r\n}\r\n\r\n","import { DomScanner } from \"./DomScanner\";\r\nimport { DomScannerLoaded } from \"./DomScannerLoaded\";\r\nimport { Parser } from \"./Parser\";\r\nimport { PageOptions } from \"./Page\";\r\nimport { DataManager, TypeData } from \"./DataManager\";\r\nimport { AttrInfo, ElementRenderInfo, NodeElementInfo, NodeInfo, NodeTextInfo } from \"./NodeInfo\";\r\nimport { Directive, DirectiveConfig } from \"./Directive\";\r\nimport { DirectiveElementRender } from \"./DirectiveElementRender\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { DirectiveElementElse } from \"./DirectiveElementElse\";\r\nimport { DirectiveHtmlInputRender } from \"./DirectiveHtmlInputRender\";\r\n\r\nconst propLiveInfo = Symbol(\"LiveDomInfoProp\");\r\nconst attrLiveName = \"_ld\";\r\nconst attrLiveEach = \"live:each\";\r\nconst attrLiveIf = \"live:if\";\r\nconst attrLiveElse = \"live:else\";\r\nlet nextId = 1001;\r\n\r\nexport class PageController\r\n{\r\n    public doc: Document;\r\n    public options: PageOptions;\r\n    public dataManager: DataManager;\r\n    public scanCompletedPromise: Promise<void> = null;\r\n    \r\n    private scanner: DomScanner;\r\n    private elementDirectivesConfig: DirectiveConfig<Element>[];\r\n    // private directiveText: DirectiveText;\r\n    // private nodeInfos: MapObject<NodeInfo>;\r\n    private requestRenderPagePromise: Promise<void> = null;\r\n    \r\n    public constructor(doc: Document, options: PageOptions)\r\n    {\r\n        this.doc = doc;\r\n        this.options = options;\r\n        this.dataManager = new DataManager(this.options.data || {});\r\n        this.elementDirectivesConfig = [\r\n            {attr: attrLiveEach, setup: DirectiveElementEach.setup, },\r\n            {attr: attrLiveIf, setup: DirectiveElementIf.setup, },\r\n            {attr: attrLiveElse, setup: DirectiveElementElse.setup, },\r\n            {attr: null, setup: DirectiveHtmlInputRender.setup, },\r\n            {attr: null, setup: DirectiveElementRender.setup, },\r\n        ];\r\n        // this.directiveText = new DirectiveText();\r\n        // this.nodeInfos = {};\r\n        \r\n        this.scanner = new DomScannerLoaded(document, {\r\n            elementStart: this.scanElementStart.bind(this),\r\n            elementEnd: this.scanElementEnd.bind(this),\r\n            comment: this.scanComment.bind(this),\r\n            text: this.scanText.bind(this),\r\n            textChanged: this.onTextChanged.bind(this),\r\n        });\r\n        \r\n        this.scanCompletedPromise = this.scanner.scan().\r\n        then(() =>\r\n        {\r\n            if(this.options.onPageSetupCompleted)\r\n                this.options.onPageSetupCompleted();\r\n            \r\n            this.requestRenderPage();\r\n        });\r\n    }\r\n    \r\n    public updatePageData(data: TypeData = {}) : Promise<void>\r\n    {\r\n        // console.log(\"updatePageData:\", data);\r\n        this.dataManager.mergePageData(data);\r\n        return this.requestRenderPage();\r\n    }\r\n    private requestRenderPage() : Promise<void>\r\n    {\r\n        if(this.requestRenderPagePromise)\r\n            return this.requestRenderPagePromise;\r\n        \r\n        return this.requestRenderPagePromise = this.scanCompletedPromise.\r\n        then(() => wait(5)).\r\n        then(() =>\r\n        {\r\n            this.requestRenderPagePromise = null;\r\n            this.renderElement(this.doc.documentElement);\r\n            this.dataManager.commitMergeData();\r\n        });\r\n    }\r\n    \r\n    private scanElementStart(element: Element) : void\r\n    {\r\n        // console.log(\"elementStart:\", element);\r\n        this.setupElement(element);\r\n    }\r\n    private scanElementEnd(element: Element) : void\r\n    {\r\n        // this.renderElement(element);\r\n    }\r\n    private scanComment(comment: Comment) : void\r\n    {\r\n        // console.log(\"comment:\", comment);\r\n    }\r\n    private scanText(text: Text) : void\r\n    {\r\n        // console.log(\"text:\", text);\r\n        this.setupText(text);\r\n    }\r\n    \r\n    private onTextChanged(text: Text) : void\r\n    {\r\n        // console.log(\"onTextChanged:\", this.getNodeInfo(text), text);\r\n        const info = this.getNodeInfo(text);\r\n        if(info)\r\n            return ;\r\n        \r\n        this.setupText(text);\r\n    }\r\n    \r\n    private setupElement(element: Element)\r\n    {\r\n        const info: NodeElementInfo = this.getNodeInfo(element) as NodeElementInfo || {\r\n            id: 'LDE'+(nextId++),\r\n            element,\r\n            placeholderComment: null,\r\n            attrs: {},\r\n            directives: [],\r\n        };\r\n        \r\n        // console.log(\"DirectiveElement build node:\", nodeInfo, node);\r\n        this.setElementAttributes(element, info);\r\n        this.setupElementDirectives(element, info);\r\n        \r\n        if(Object.keys(info.attrs).length == 0 && Object.keys(info.directives).length == 0)\r\n        {\r\n            this.setNodeInfo(element, null);\r\n            return ;\r\n        }\r\n        \r\n        info.render = this.renderElement.bind(this);\r\n        this.setNodeInfo(element, info);\r\n    }\r\n    private setElementAttributes(element: Element, info: NodeElementInfo)\r\n    {\r\n        const attrs = element.attributes;\r\n        for(let i=attrs.length-1; i>=0; --i)\r\n        {\r\n            const attr = attrs[i];\r\n            if(info.attrs[attr.name] && info.attrs[attr.name].srcVal == attr.value)\r\n                continue;\r\n            \r\n            const attrInfo = this.setupAttribute(attr);\r\n            // console.log(\"initElement attribute:\", attr, attrInfo);\r\n            if(attrInfo)\r\n                info.attrs[attr.name] = attrInfo;\r\n            else\r\n                delete info.attrs[attr.name];\r\n        }\r\n    }\r\n    private setupAttribute(attr: Attr) : AttrInfo\r\n    {\r\n        const srcVal = attr.value;\r\n        const parseResult = Parser.parseText(srcVal);\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return null;\r\n        \r\n        return {\r\n            srcVal,\r\n            paths: parseResult.paths,\r\n            exec: parseResult.exec,\r\n            directive: null,\r\n        };\r\n    }\r\n    private setupElementDirectives(element: Element, info: NodeElementInfo)\r\n    {\r\n        for(const config of this.elementDirectivesConfig)\r\n        {\r\n            config.setup(this, element, info, config);\r\n        }\r\n    }\r\n    private renderElement(placeholder: Element)\r\n    {\r\n        const elementInfo = this.getNodeInfo(placeholder) as NodeElementInfo;\r\n        // console.log(\"renderElement:\", placeholder, this.isLiveNode(placeholder), elementInfo);\r\n        if(! elementInfo)\r\n        {\r\n            this.renderChildNodes(placeholder);\r\n            return ;\r\n        }\r\n        \r\n        const exists: Node[] = [placeholder];\r\n        let nextNode = placeholder.nextSibling;\r\n        while(nextNode)\r\n        {\r\n            const nextInfo = this.getNodeInfo(nextNode);\r\n            if(nextInfo != elementInfo)\r\n                break;\r\n            \r\n            exists.push(nextNode);\r\n            nextNode = nextNode.nextSibling;\r\n        }\r\n        \r\n        const renderInfo: ElementRenderInfo = {\r\n            elementInfo,\r\n            exists,\r\n            // attrsVal: {}, //TODO no use\r\n        };\r\n        \r\n        const element = placeholder.nodeType==1 ? placeholder as Element : elementInfo.element;\r\n        const renderElements = this.processElementDirectiveRender(element, renderInfo, 0);\r\n        // console.log(\"renderElement renderElements:\", element, renderElements, renderInfo);\r\n        if(renderElements.length == 0)\r\n        {\r\n            // console.log(\"renderElement renderElements remove:\", exists.length, element.parentNode, element);\r\n            const placeholderComment = this.getPlaceholderComment(elementInfo);\r\n            insertAfter(placeholder, placeholderComment);\r\n            for(const ele of exists)\r\n            {\r\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>\", ele.parentNode, ele);\r\n                if(ele != placeholderComment)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let prev = placeholder;\r\n            for(const ele of renderElements)\r\n            {\r\n                insertAfter(prev, ele);\r\n                prev = ele;\r\n            }\r\n            \r\n            for(const ele of exists)\r\n            {\r\n                if(renderElements.indexOf(ele as Element) < 0)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n    }\r\n    private processElementDirectiveRender(element: Element, renderInfo: ElementRenderInfo, directiveIndex: number) : Element[]\r\n    {\r\n        const directives = renderInfo.elementInfo.directives;\r\n        \r\n        if(directiveIndex < directives.length)\r\n        {\r\n            return directives[directiveIndex].render(\r\n                element,\r\n                renderInfo, \r\n                (ele: Element, info: ElementRenderInfo) => this.processElementDirectiveRender(ele, info, directiveIndex+1)\r\n            );\r\n        }\r\n        \r\n        return [element];\r\n    }\r\n    public isPlaceholder(node: Node) : boolean\r\n    {\r\n        if(node.nodeType != 8) //8: Node.COMMENT_NODE\r\n            return false;\r\n        \r\n        const info = this.getNodeInfo(node) as NodeElementInfo;\r\n        return !!info && info.placeholderComment == node;\r\n    }\r\n    private getPlaceholderComment(info: NodeElementInfo) : Comment\r\n    {\r\n        if(info.placeholderComment)\r\n            return info.placeholderComment;\r\n        \r\n        info.placeholderComment = this.doc.createComment(\"_LiveDomId=\"+info.id);\r\n        this.setNodeInfo(info.placeholderComment, info);\r\n        return info.placeholderComment;\r\n    }\r\n    public renderChildNodes(parentNode: Node)\r\n    {\r\n        const t = nextId ++;\r\n        const nodes = [];\r\n        const l = parentNode.childNodes.length;\r\n        for(let i=0; i<l; ++i)\r\n            nodes.push(parentNode.childNodes[i]);\r\n        \r\n        for(let i=0; i<l; ++i)\r\n        {\r\n            const node = nodes[i];\r\n            const info = this.getNodeInfo(node);\r\n            if(!info)\r\n            {\r\n                if(node.nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                    this.renderChildNodes(node);\r\n                continue;\r\n            }\r\n            \r\n            if(info._t == t)\r\n                continue;\r\n            \r\n            info.render(node);\r\n            info._t = t;\r\n        }\r\n    }\r\n    \r\n    private setupText(text: Text)\r\n    {\r\n        const parseResult = Parser.parseText(text.data);\r\n        // console.log(\"buildNode parseText:\", parseResult, parseResult.exec({}));\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return ;\r\n        \r\n        const info: NodeTextInfo = {\r\n            id: 'LDT'+(nextId++),\r\n        };\r\n        const textExec = parseResult.exec;\r\n        \r\n        // console.log(\"buildNode:\", info, text);\r\n        info.render = (node: Text) =>\r\n        {\r\n            node.data = textExec(this.dataManager.data);\r\n        }\r\n        this.setNodeInfo(text, info);\r\n        // info.render(text);\r\n    }\r\n    \r\n    public cloneNode<N extends Node>(src: N): N\r\n    {\r\n        const des = src.cloneNode(true);\r\n        this.cloneNodesInfo([src], [des]);\r\n        return des as N;\r\n    }\r\n    private cloneNodesInfo(srcNodes: Node[]|NodeListOf<ChildNode>, desNodes: Node[]|NodeListOf<ChildNode>)\r\n    {\r\n        for(let i=0, l=srcNodes.length; i < l; ++i)\r\n        {\r\n            desNodes[i][propLiveInfo] = srcNodes[i][propLiveInfo];\r\n            \r\n            if(srcNodes[i].nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                this.cloneNodesInfo(srcNodes[i].childNodes, desNodes[i].childNodes);\r\n        }\r\n    }\r\n    \r\n    private setNodeInfo(node: Node, info: NodeInfo)\r\n    {\r\n        //weak map ?\r\n        //prop map ?\r\n        node[propLiveInfo] = info;\r\n    }\r\n    public getNodeInfo(node: Node) : NodeInfo\r\n    {\r\n        return node[propLiveInfo] || null;\r\n    }\r\n    private hasNodeInfo(node: Node) : boolean\r\n    {\r\n        return !!node[propLiveInfo];\r\n    }\r\n    private isLiveNode(node: Node) : boolean\r\n    {\r\n        return propLiveInfo in node;\r\n    }\r\n}\r\n\r\n\r\nfunction removeNode(node: Node)\r\n{\r\n    if(node.parentNode)\r\n        node.parentNode.removeChild(node);\r\n}\r\n\r\nfunction insertAfter(before: Node, node: Node)\r\n{\r\n    // console.log(\"insertAfter:\", before, node, before==node, !!before.nextSibling, !!node.parentNode);\r\n    if(before == node)\r\n        return ;\r\n    else if(before.nextSibling)\r\n        before.parentNode.insertBefore(node, before.nextSibling);\r\n    else\r\n        before.parentNode.appendChild(node);\r\n}\r\n\r\nfunction wait(ms: number) : Promise<void>\r\n{\r\n    return new Promise(function(resolve)\r\n    {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n","import { DataPaths, TypeData } from \"./DataManager\";\r\n\r\nexport type TextFunction<R=any> = (data: TypeData) => R;\r\n\r\ninterface ParseTextResult\r\n{\r\n    // vars: string[];\r\n    parts: (string|TextFunction)[];\r\n    paths: DataPaths;\r\n    exec(data: TypeData);\r\n}\r\n\r\nexport class Parser\r\n{\r\n    public static parseText(text: string) : ParseTextResult\r\n    {\r\n        const expressionRegex = /\\$\\{\\s*([a-zA-z_]\\w*(\\.\\w+)*)\\s*\\}/g;\r\n        // console.log(\"parseText:\", text.length, text.match(expressionRegex));\r\n        const parts: (string|TextFunction)[] = [];\r\n        const paths: DataPaths = {};\r\n        let match: RegExpExecArray = null;\r\n        let lastIndex = 0;\r\n        \r\n        while(match = expressionRegex.exec(text))\r\n        {\r\n            if(lastIndex < match.index)\r\n                parts.push(text.substring(lastIndex, match.index));\r\n            \r\n            // console.log(\"parseText result:\", result, expressionRegex.lastIndex);\r\n            const names = match[1].split(/\\./g);\r\n            paths[match[1]] = names;\r\n            parts.push(buildTextFunction(names));\r\n            \r\n            lastIndex = expressionRegex.lastIndex;\r\n        }\r\n        \r\n        if(lastIndex < text.length)\r\n            parts.push(text.substring(lastIndex, text.length));\r\n        // console.log(\"parseText lastIndex:\", expressionRegex.lastIndex, parts);\r\n        \r\n        return {\r\n            parts,\r\n            paths,\r\n            exec: buildParseResultRenderer(parts),\r\n        }; \r\n    }\r\n\r\n    public static hasTextExpress(result: ParseTextResult)\r\n    {\r\n        if(result.parts.length > 1)\r\n            return true;\r\n        \r\n        return result.parts.length == 1 && typeof(result.parts[0]) != \"string\";\r\n    }\r\n}\r\n\r\n\r\n// function getWatchVars(info: ParseTextExpressionInfo): string[]\r\n// {\r\n//     // return [info.var.replace(/\\s*\\.\\s*/g, \".\")];\r\n//     return info.var.split(/\\s*\\.\\s*/, 1).slice(0, 1);\r\n// }\r\n\r\nfunction buildTextFunction(names: string[]) : TextFunction\r\n{\r\n    let lastNamePath = \"\";\r\n    let namesPath = names.map((name) =>\r\n    {\r\n        lastNamePath = lastNamePath + \".\" + name;\r\n        return lastNamePath.substring(1);\r\n    });\r\n    \r\n    // let body = \"return data\" + names.map(name => '[\"'+name+'\"]').join(\"\") + \";\";\r\n    let body = `var ${names[0]}=data.${names[0]}; `\r\n            + `return (${namesPath.map(p => `${p}!==null&&${p}!==void 0`).join(\" && \")}) ? ${names.join(\".\")} : null;`;\r\n    \r\n    // console.log(\"buildTextRenderer:\", names, namesPath, body);\r\n    return new Function(\"data\", body) as TextFunction;\r\n}\r\n\r\nfunction buildParseResultRenderer(parts: (string|TextFunction)[])\r\n{\r\n    if(parts.length == 1 && typeof(parts[0]) == \"function\")\r\n    {\r\n        return parts[0];\r\n    }\r\n    \r\n    if(parts.length == 1 && typeof(parts[0]) == \"string\")\r\n    {\r\n        const text = parts[0];\r\n        return function() { return text; };\r\n    }\r\n    \r\n    return function(data: TypeData)\r\n    {\r\n        const results: string[] = [];\r\n        for(const p of parts)\r\n        {\r\n            if(typeof(p) == \"string\")\r\n                results.push(p);\r\n            else\r\n                results.push(p(data));\r\n        }\r\n        \r\n        // console.log(\"textNodeRenderer results:\", results, data);\r\n        return results.join(\"\");\r\n    };\r\n}\r\n\r\n\r\n\r\n","import LiveDom from \"./LiveDom\";\r\n\r\n// console.log(\">>>>>>>>>>>>> LiveDom:\", LiveDom);\r\n\r\n// export function testLiveDom()\r\n// {\r\n//     console.log(\">>>>>>>>>>>>> testLiveDom:\", LiveDom);\r\n    \r\n// }\r\n\r\n// window[\"LiveDom\"] = LiveDom;\r\n\r\nexport = LiveDom;\r\n"]}