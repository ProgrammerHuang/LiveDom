{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/DataManager.ts","src/Directive.ts","src/DirectiveElementEach.ts","src/DirectiveElementElse.ts","src/DirectiveElementIf.ts","src/DirectiveElementRender.ts","src/DirectiveHtmlInputRender.ts","src/DomScanner.ts","src/DomScannerLoaded.ts","src/LiveDom.ts","src/Page.ts","src/PageController.ts","src/Parser.ts","src/main.ts"],"names":["f","exports","module","define","amd","window","global","self","this","LiveDom","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","DataManager","initData","topData","scopeDataStack","lastMergeData","pageData","Object","create","data","mergePageData","prototype","newData","assign","commitMergeData","hasUseLastMergeData","paths","pushScopeData","scopeData","push","popScopeData","pop","getPrototypeOf","Directive","controller","hasDirective","_info","info","directives","Array","isArray","_i","_a","_super","Directive_1","propLiveKeyData","Symbol","DirectiveElementEach","__extends","element","config","attrs","attr","attrInfo","removeAttribute","render","continueRender","elementInfo","items","exec","dataManager","renderElements","l","item","keyVal","itemElement","exists","find","ele","indexOf","this_1","cloneNode","itemName","indexName","itemRenderElements","_this","getAttribute","DirectiveElementEach_1","DirectiveElementIf_1","DirectiveElementElse","hasAttribute","prevNode","previousSibling","isPlaceholder","prevNodeInfo","getNodeInfo","DirectiveElementIf","nodeType","DirectiveElementRender","attrName","attrVal","setAttribute","renderChildNodes","DirectiveHtmlInputRender","tagName","toLocaleLowerCase","value","checked","keys","val","DomScanner","doc","options","ignoreElementTags","script","style","observer","MutationObserver","mutationObserverCallback","bind","mutationList","DomScanner_1","DomScannerLoaded","scan","scanPromise","Promise","resolve","reject","readyState","walkNode","documentElement","observe","subtree","childList","attributes","characterData","addEventListener","node","processElement","processText","processComment","toLowerCase","processElementStart","childNodes","forEach","processElementEnd","elementStart","elementEnd","comment","text","apply","arguments","Page_1","PageController_1","initPage","PageController","document","createPage","page","Page","updateData","updatePageData","DomScannerLoaded_1","Parser_1","DataManager_1","DirectiveElementRender_1","DirectiveElementElse_1","DirectiveHtmlInputRender_1","propLiveInfo","nextId","scanCompletedPromise","requestRenderPagePromise","elementDirectivesConfig","scanner","scanElementStart","scanElementEnd","scanComment","scanText","then","onPageSetupCompleted","requestRenderPage","removeNode","parentNode","removeChild","insertAfter","before","nextSibling","insertBefore","appendChild","ms","setTimeout","renderElement","setupElement","setupText","id","placeholderComment","setupAttribute","name","setupElementDirectives","setNodeInfo","directive","srcVal","parseResult","Parser","parseText","hasTextExpress","placeholder","nextNode","processElementDirectiveRender","getPlaceholderComment","exists_1","prev","renderElements_1","_b","exists_2","renderInfo","directiveIndex","createComment","nodes","_t","textExec","src","des","cloneNodesInfo","srcNodes","desNodes","hasNodeInfo","isLiveNode","expressionRegex","parts","match","lastIndex","index","substring","names","split","lastNamePath","namesPath","map","body","concat","join","Function","buildTextFunction","results","parts_1","text_1","buildParseResultRenderer","result","LiveDom_1","default"],"mappings":"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","file":"livedom.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nexport type TypeData = {[k: string]: any};\r\nexport type DataPaths = {[path: string]: string[]};\r\n\r\nexport class DataManager\r\n{\r\n    public data: TypeData;\r\n    public topData: TypeData;\r\n    public pageData: TypeData;\r\n    public lastMergeData: TypeData;\r\n    private scopeDataStack: TypeData[];\r\n    \r\n    public constructor(initData: TypeData)\r\n    {\r\n        this.topData = {};\r\n        this.scopeDataStack = [];\r\n        this.lastMergeData = {};\r\n        \r\n        this.pageData = Object.create(this.topData);\r\n        this.data = Object.create(this.pageData);\r\n        \r\n        this.mergePageData(initData);\r\n    }\r\n    \r\n    public mergePageData(newData: TypeData)\r\n    {\r\n        Object.assign(this.lastMergeData, newData);\r\n        Object.assign(this.pageData, newData);\r\n    }\r\n    public commitMergeData() //like transaction commit\r\n    {\r\n        this.lastMergeData = {};\r\n    }\r\n    public hasUseLastMergeData(paths: DataPaths): boolean\r\n    {\r\n        for(const p in paths)\r\n        {\r\n            if(paths[p][0] in this.lastMergeData)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    public pushScopeData(scopeData: TypeData)\r\n    {\r\n        this.scopeDataStack.push(scopeData);\r\n        this.data = Object.create(this.data);\r\n        Object.assign(this.data, scopeData);\r\n    }\r\n    public popScopeData(scopeData: TypeData)\r\n    {\r\n        if (this.scopeDataStack[this.scopeDataStack.length - 1] != scopeData)\r\n            throw new Error(\"popScopeData fail! scopeData not last data.\");\r\n\r\n        this.scopeDataStack.pop();\r\n        this.data = Object.getPrototypeOf(this.data);\r\n    }\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { ElementRenderInfo, NodeElementInfo, NodeInfo } from \"./NodeInfo\";\r\n\r\nexport interface DirectiveConfig<N extends Node = Node>\r\n{\r\n    attr?: string;\r\n    create: (controller: PageController, node: N, info: NodeInfo, config: DirectiveConfig<N>)=>Directive<N>|null;\r\n}\r\n\r\nexport interface DirectiveRender<N extends Node = Node>\r\n{\r\n    (element: N, renderInfo: ElementRenderInfo): N[];\r\n}\r\n// class DirectiveText extends Directive\r\n// {\r\n// }\r\n\r\n\r\nexport abstract class Directive<N extends Node = Node>\r\n{\r\n    public static hasDirective(_info: NodeInfo) : boolean\r\n    {\r\n        const info = _info as NodeElementInfo;\r\n        \r\n        if(!info.directives || !Array.isArray(info.directives))\r\n            return false;\r\n        \r\n        for(const d of info.directives)\r\n        {\r\n            if(d instanceof this)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    // public name: string = null;\r\n    // public abstract buildNode(nodeInfo: NodeInfo, node: Node);\r\n    public abstract render(element: N, renderInfo: ElementRenderInfo, continueRender: DirectiveRender<N>): N[];\r\n    // public abstract unsetNode(nodeInfo: NodeInfo);\r\n    protected controller: PageController;\r\n    protected constructor(controller: PageController)\r\n    {\r\n        this.controller = controller;\r\n    }\r\n}\r\n\r\n// class DirectiveElementStateClass extends Directive //live-state=\"rendering|complete\"\r\n// {\r\n// }\r\n// class DirectiveElementContent extends Directive //live:cont\r\n// {\r\n// }\r\n\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nconst propLiveKeyData = Symbol(\"LiveDomKeyDataProp\");\r\n\r\nexport class DirectiveElementEach extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementEach\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        \r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n        \r\n        return new DirectiveElementEach(controller, element, attrInfo);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    private itemName: string;\r\n    private indexName: string;\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n        this.itemName = element.getAttribute(\"live:item\") || \"item\";\r\n        this.indexName = element.getAttribute(\"live:index\") || \"index\";\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const items = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        // info.directivesVal[attrLiveEach] = items;\r\n        \r\n        if(!Array.isArray(items) || items.length == 0)\r\n            return [];\r\n        \r\n        let renderElements: Element[] = [];\r\n        for(let i=0, l=items.length; i<l; ++i)\r\n        {\r\n            const item = items[i];\r\n            // console.log(\"DirectiveElementEach item:\", item);\r\n            const keyVal = item; //TODO keyGetter(item), default return item\r\n            \r\n            // console.log(\"processElementEach itemElement from exists: \", info.exists.find((ele: Element) => ele[propLiveKeyData]==keyVal && renderElements.indexOf(ele)<0));\r\n            // const itemElement = this.controller.cloneNode(elementInfo.element);\r\n            const itemElement = info.exists.find((ele: Element) => propLiveKeyData in ele && ele[propLiveKeyData] == keyVal && renderElements.indexOf(ele) < 0) as Element ||\r\n                                this.controller.cloneNode(elementInfo.element);\r\n            itemElement[propLiveKeyData] = keyVal;\r\n            \r\n            const scopeData = { [this.itemName]: item, [this.indexName]: i };\r\n            this.controller.dataManager.pushScopeData(scopeData);\r\n            const itemRenderElements = continueRender(itemElement, info);\r\n            this.controller.dataManager.popScopeData(scopeData);\r\n            \r\n            if (itemRenderElements.length > 0)\r\n                renderElements.push(itemRenderElements[0]);\r\n        }\r\n\r\n        return renderElements;\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementElse extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementElse\r\n    {\r\n        if (!element.hasAttribute(config.attr))\r\n            return null;\r\n        \r\n        element.removeAttribute(config.attr);\r\n        \r\n        return new DirectiveElementElse(controller, element);\r\n    }\r\n    \r\n    // private element: Element;\r\n    protected constructor(controller: PageController, element: Element)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementElse renderNode:\", element, element.previousElementSibling, info);\r\n        let prevNode: Node = info.exists[0];\r\n        while(prevNode = prevNode.previousSibling)\r\n        {\r\n            if(this.controller.isPlaceholder(prevNode))\r\n            {\r\n                const prevNodeInfo = this.controller.getNodeInfo(prevNode);\r\n                if(DirectiveElementIf.hasDirective(prevNodeInfo) || DirectiveElementEach.hasDirective(prevNodeInfo))\r\n                    return continueRender(element, info);\r\n                \r\n                break;\r\n            }\r\n            \r\n            if(prevNode.nodeType == 1) //1: Node.ELEMENT_NODE\r\n                break;\r\n        }\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementIf extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementIf\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        \r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n        \r\n        return new DirectiveElementIf(controller, element, attrInfo);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const val = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        if (val)\r\n            return continueRender(element, info);\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementRender extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementRender\r\n    {\r\n        return new DirectiveElementRender(controller);\r\n    }\r\n\r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementRender renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n\r\n        for (const attrName in elementInfo.attrs)\r\n        {\r\n            // if has custom element and xxxxx()\r\n            // else if attrVal != attr.value\r\n            const attrInfo = elementInfo.attrs[attrName];\r\n            const attrVal = attrInfo.exec(this.controller.dataManager.data);\r\n            // renderInfo.attrsVal[attrName] = attrVal;\r\n            element.setAttribute(attrName, attrVal);\r\n        }\r\n\r\n        this.controller.renderChildNodes(element);\r\n\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo, AttrInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\ntype AttrsInfoMap = {[name: string]: AttrInfo};\r\n\r\nexport class DirectiveHtmlInputRender extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveHtmlInputRender\r\n    {\r\n        if(element.tagName.toLocaleLowerCase() != \"input\")\r\n            return null;\r\n        \r\n        const attrs: AttrsInfoMap = {};\r\n        \r\n        if(element.hasAttribute(\"value\") && info.attrs.value)\r\n        {\r\n            attrs.value = info.attrs.value;\r\n            element.removeAttribute(\"value\");\r\n            delete info.attrs.value;\r\n        }\r\n        \r\n        if(element.hasAttribute(\"checked\") && info.attrs.checked)\r\n        {\r\n            attrs.checked = info.attrs.checked;\r\n            element.removeAttribute(\"checked\");\r\n            delete info.attrs.checked;\r\n        }\r\n        \r\n        if(Object.keys(attrs).length > 0)\r\n            return new DirectiveHtmlInputRender(controller, element, attrs);\r\n        return null;\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrs: AttrsInfoMap;\r\n\r\n    protected constructor(controller: PageController, element: Element, attrs: AttrsInfoMap)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrs = attrs;\r\n    }\r\n\r\n    public render(element: HTMLInputElement, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        \r\n        if(this.attrs.value && this.controller.dataManager.hasUseLastMergeData(this.attrs.value.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.value.exec(this.controller.dataManager.data);\r\n            element.setAttribute(\"value\", val);\r\n            element.value = val;\r\n        }\r\n        \r\n        if(this.attrs.checked && this.controller.dataManager.hasUseLastMergeData(this.attrs.checked.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.checked.exec(this.controller.dataManager.data);\r\n            // element.setAttribute(\"value\", val);\r\n            element.checked = !!val;\r\n        }\r\n        \r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","\r\n\r\nexport interface DomScannerOptions\r\n{\r\n    elementStart(element: Element): void;\r\n    elementEnd(element: Element): void;\r\n    comment(comment: Comment): void;\r\n    text(text: Text): void;\r\n}\r\n\r\nexport abstract class DomScanner\r\n{\r\n    protected doc: Document;\r\n    protected observer: MutationObserver;\r\n    protected options: DomScannerOptions;\r\n    protected ignoreElementTags = {script: true, style: true};\r\n\r\n    public constructor(doc: Document, options: DomScannerOptions)\r\n    {\r\n        this.options = options;\r\n        this.doc = doc;\r\n        this.observer = new MutationObserver(this.mutationObserverCallback.bind(this));\r\n    }\r\n\r\n    public abstract scan(): Promise<void>;\r\n\r\n    private mutationObserverCallback(mutationList: MutationRecord[])\r\n    {\r\n        // console.log(\"mutationObserverCallback:\", mutationList);\r\n        // push into loading queue\r\n    }\r\n}\r\n","import { DomScanner } from \"./DomScanner\";\r\n\r\nexport class DomScannerLoaded extends DomScanner\r\n{\r\n    protected scanPromise: Promise<void> = null;\r\n\r\n    public scan(): Promise<void>\r\n    {\r\n        if (this.scanPromise)\r\n            return this.scanPromise;\r\n\r\n        return this.scanPromise = new Promise<void>((resolve, reject) =>\r\n        {\r\n            if (this.doc.readyState == \"complete\")\r\n            {\r\n                this.walkNode(this.doc.documentElement);\r\n                this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                resolve();\r\n            }\r\n\r\n            else\r\n            {\r\n                this.doc.addEventListener(\"DOMContentLoaded\", () =>\r\n                {\r\n                    this.walkNode(this.doc.documentElement);\r\n                    this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    protected walkNode(node: Node)\r\n    {\r\n        // console.log(\"walk node:\", node, this.isCompletedNode(node));\r\n        switch (node.nodeType)\r\n        {\r\n            case 1: //ELEMENT_NODE\r\n                this.processElement(node as Element);\r\n                break;\r\n            case 3: //TEXT_NODE\r\n                this.processText(node as Text);\r\n                break;\r\n            // case 4: //CDATA_SECTION_NODE\r\n            //     if(childInfo = initText(controller, node as Text))\r\n            //     {\r\n            //         info.watch = info.watch.concat(childInfo.watch);\r\n            //     }\r\n            //     break;\r\n            case 8: //COMMENT_NODE\r\n                this.processComment(node as Comment);\r\n                break;\r\n            // default : //Not support type\r\n            //     break;\r\n        }\r\n\r\n    }\r\n\r\n    protected processElement(element: Element)\r\n    {\r\n        // console.log(\"process element:\", element);\r\n        if (this.ignoreElementTags[element.tagName.toLowerCase()])\r\n            return;\r\n\r\n        // if(this.incompleteNodes.indexOf(element) < 0)\r\n        this.processElementStart(element);\r\n\r\n        element.childNodes.forEach((node: Node) =>\r\n        {\r\n            this.walkNode(node);\r\n        });\r\n\r\n        this.processElementEnd(element);\r\n    }\r\n\r\n    protected processElementStart(element: Element)\r\n    {\r\n        // console.log(\"processElementStart:\", element);\r\n        this.options.elementStart(element);\r\n    }\r\n    protected processElementEnd(element: Element)\r\n    {\r\n        // console.log(\"processElementEnd:\", element);\r\n        this.options.elementEnd(element);\r\n    }\r\n    protected processComment(node: Comment)\r\n    {\r\n        // console.log(\"processComment:\", node);\r\n        this.options.comment(node);\r\n    }\r\n    protected processText(node: Text)\r\n    {\r\n        // console.log(\"processText:\", node);\r\n        this.options.text(node);\r\n    }\r\n}\r\n","import { createPage, Page, PageOptions } from \"./Page\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport default class LiveDom\r\n{\r\n    public static initPage(options: PageOptions = {}) : Page\r\n    {\r\n        const controller = new PageController(document, options);\r\n        return createPage(controller);\r\n    }\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\nimport { PageController } from \"./PageController\";\r\n\r\n //TODO singleton for page, and life in doc\r\n\r\nexport interface PageOptions\r\n{\r\n    // container?: Element|string;\r\n    data?: TypeData; //init data\r\n    // directives?: MapObject<DirectiveOptions>;\r\n    onPageSetupCompleted?: ()=>void;\r\n    // debug?: boolean;\r\n}\r\n\r\nexport function createPage(controller: PageController) : Page\r\n{\r\n    const page = new Page();\r\n    \r\n    page.updateData = controller.updatePageData.bind(controller);\r\n    // page.onReady = function(cb)\r\n    // {\r\n    //     controller.scanCompletedPromise.then(cb);\r\n    // }\r\n    \r\n    return page;\r\n}\r\n\r\nexport class Page\r\n{\r\n    public updateData: (data: TypeData) => Promise<void>;\r\n    // public onReady: (callback: ()=>void) => void;\r\n}\r\n\r\n","import { DomScanner } from \"./DomScanner\";\r\nimport { DomScannerLoaded } from \"./DomScannerLoaded\";\r\nimport { Parser } from \"./Parser\";\r\nimport { PageOptions } from \"./Page\";\r\nimport { DataManager, TypeData } from \"./DataManager\";\r\nimport { AttrInfo, ElementRenderInfo, NodeElementInfo, NodeInfo, NodeTextInfo } from \"./NodeInfo\";\r\nimport { Directive, DirectiveConfig } from \"./Directive\";\r\nimport { DirectiveElementRender } from \"./DirectiveElementRender\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { DirectiveElementElse } from \"./DirectiveElementElse\";\r\nimport { DirectiveHtmlInputRender } from \"./DirectiveHtmlInputRender\";\r\n\r\nconst propLiveInfo = Symbol(\"LiveDomInfoProp\");\r\nconst attrLiveName = \"_ld\";\r\nconst attrLiveEach = \"live:each\";\r\nconst attrLiveIf = \"live:if\";\r\nconst attrLiveElse = \"live:else\";\r\nlet nextId = 1001;\r\n\r\nexport class PageController\r\n{\r\n    public doc: Document;\r\n    public options: PageOptions;\r\n    public dataManager: DataManager;\r\n    public scanCompletedPromise: Promise<void> = null;\r\n    \r\n    private scanner: DomScanner;\r\n    private elementDirectivesConfig: DirectiveConfig<Element>[];\r\n    // private directiveText: DirectiveText;\r\n    // private nodeInfos: MapObject<NodeInfo>;\r\n    private requestRenderPagePromise: Promise<void> = null;\r\n    \r\n    public constructor(doc: Document, options: PageOptions)\r\n    {\r\n        this.doc = doc;\r\n        this.options = options;\r\n        this.dataManager = new DataManager(this.options.data || {});\r\n        this.elementDirectivesConfig = [\r\n            {attr: attrLiveEach, create: DirectiveElementEach.create, },\r\n            {attr: attrLiveIf, create: DirectiveElementIf.create, },\r\n            {attr: attrLiveElse, create: DirectiveElementElse.create, },\r\n            {attr: null, create: DirectiveHtmlInputRender.create, },\r\n            {attr: null, create: DirectiveElementRender.create, },\r\n        ];\r\n        // this.directiveText = new DirectiveText();\r\n        // this.nodeInfos = {};\r\n        \r\n        this.scanner = new DomScannerLoaded(document, {\r\n            elementStart: this.scanElementStart.bind(this),\r\n            elementEnd: this.scanElementEnd.bind(this),\r\n            comment: this.scanComment.bind(this),\r\n            text: this.scanText.bind(this),\r\n        });\r\n        \r\n        this.scanCompletedPromise = this.scanner.scan().\r\n        then(() =>\r\n        {\r\n            if(this.options.onPageSetupCompleted)\r\n                this.options.onPageSetupCompleted();\r\n            \r\n            this.requestRenderPage();\r\n        });\r\n    }\r\n    \r\n    public updatePageData(data: TypeData = {}) : Promise<void>\r\n    {\r\n        // console.log(\"updatePageData:\", data);\r\n        this.dataManager.mergePageData(data);\r\n        return this.requestRenderPage();\r\n    }\r\n    private requestRenderPage() : Promise<void>\r\n    {\r\n        if(this.requestRenderPagePromise)\r\n            return this.requestRenderPagePromise;\r\n        \r\n        return this.requestRenderPagePromise = this.scanCompletedPromise.\r\n        then(() => wait(5)).\r\n        then(() =>\r\n        {\r\n            this.requestRenderPagePromise = null;\r\n            this.renderElement(this.doc.documentElement);\r\n            this.dataManager.commitMergeData();\r\n        });\r\n    }\r\n    \r\n    private scanElementStart(element: Element) : void\r\n    {\r\n        // console.log(\"elementStart:\", element);\r\n        this.setupElement(element);\r\n    }\r\n    private scanElementEnd(element: Element) : void\r\n    {\r\n        // this.renderElement(element);\r\n    }\r\n    private scanComment(comment: Comment) : void\r\n    {\r\n        // console.log(\"comment:\", comment);\r\n    }\r\n    private scanText(text: Text) : void\r\n    {\r\n        // console.log(\"text:\", text);\r\n        this.setupText(text);\r\n    }\r\n    \r\n    private setupElement(element: Element)\r\n    {\r\n        const info: NodeElementInfo = {\r\n            id: 'LDE'+(nextId++),\r\n            element,\r\n            placeholderComment: null,\r\n            attrs: {},\r\n            directives: [],\r\n        };\r\n        \r\n        // console.log(\"DirectiveElement build node:\", nodeInfo, node);\r\n        const attrs = element.attributes;\r\n        for(let i=attrs.length-1; i>=0; --i)\r\n        {\r\n            const attr = attrs[i];\r\n            const attrInfo = this.setupAttribute(attr);\r\n            // console.log(\"initElement attribute:\", attr, attrInfo);\r\n            if(attrInfo)\r\n            {\r\n                info.attrs[attr.name] = attrInfo;\r\n                // attr.value = attrInfo.exec(this.data);\r\n            }\r\n        }\r\n        \r\n        this.setupElementDirectives(element, info);\r\n        \r\n        if(Object.keys(info.attrs).length == 0 && Object.keys(info.directives).length == 0)\r\n        {\r\n            this.setNodeInfo(element, null);\r\n            return ;\r\n        }\r\n        \r\n        info.render = this.renderElement.bind(this);\r\n        this.setNodeInfo(element, info);\r\n    }\r\n    private setupElementDirectives(element: Element, info: NodeElementInfo)\r\n    {\r\n        for(const config of this.elementDirectivesConfig)\r\n        {\r\n            const directive = config.create(this, element, info, config);\r\n            if(directive)\r\n                info.directives.push(directive);\r\n        }\r\n    }\r\n    private setupAttribute(attr: Attr) : AttrInfo\r\n    {\r\n        const srcVal = attr.value;\r\n        const parseResult = Parser.parseText(srcVal);\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return null;\r\n        \r\n        return {\r\n            // srcVal,\r\n            paths: parseResult.paths,\r\n            exec: parseResult.exec,\r\n        };\r\n    }\r\n    private renderElement(placeholder: Element)\r\n    {\r\n        const elementInfo = this.getNodeInfo(placeholder) as NodeElementInfo;\r\n        // console.log(\"renderElement:\", placeholder, this.isLiveNode(placeholder), elementInfo);\r\n        if(! elementInfo)\r\n        {\r\n            this.renderChildNodes(placeholder);\r\n            return ;\r\n        }\r\n        \r\n        const exists: Node[] = [placeholder];\r\n        let nextNode = placeholder.nextSibling;\r\n        while(nextNode)\r\n        {\r\n            const nextInfo = this.getNodeInfo(nextNode);\r\n            if(nextInfo != elementInfo)\r\n                break;\r\n            \r\n            exists.push(nextNode);\r\n            nextNode = nextNode.nextSibling;\r\n        }\r\n        \r\n        const renderInfo: ElementRenderInfo = {\r\n            elementInfo,\r\n            exists,\r\n            // attrsVal: {}, //TODO no use\r\n        };\r\n        \r\n        const element = placeholder.nodeType==1 ? placeholder as Element : elementInfo.element;\r\n        const renderElements = this.processElementDirectiveRender(element, renderInfo, 0);\r\n        // console.log(\"renderElement renderElements:\", element, renderElements, renderInfo);\r\n        if(renderElements.length == 0)\r\n        {\r\n            // console.log(\"renderElement renderElements remove:\", exists.length, element.parentNode, element);\r\n            const placeholderComment = this.getPlaceholderComment(elementInfo);\r\n            insertAfter(placeholder, placeholderComment);\r\n            for(const ele of exists)\r\n            {\r\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>\", ele.parentNode, ele);\r\n                if(ele != placeholderComment)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let prev = placeholder;\r\n            for(const ele of renderElements)\r\n            {\r\n                insertAfter(prev, ele);\r\n                prev = ele;\r\n            }\r\n            \r\n            for(const ele of exists)\r\n            {\r\n                if(renderElements.indexOf(ele as Element) < 0)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n    }\r\n    private processElementDirectiveRender(element: Element, renderInfo: ElementRenderInfo, directiveIndex: number) : Element[]\r\n    {\r\n        const directives = renderInfo.elementInfo.directives;\r\n        \r\n        if(directiveIndex < directives.length)\r\n        {\r\n            return directives[directiveIndex].render(\r\n                element,\r\n                renderInfo, \r\n                (ele: Element, info: ElementRenderInfo) => this.processElementDirectiveRender(ele, info, directiveIndex+1)\r\n            );\r\n        }\r\n        \r\n        return [element];\r\n    }\r\n    public isPlaceholder(node: Node) : boolean\r\n    {\r\n        if(node.nodeType != 8) //8: Node.COMMENT_NODE\r\n            return false;\r\n        \r\n        const info = this.getNodeInfo(node) as NodeElementInfo;\r\n        return !!info && info.placeholderComment == node;\r\n    }\r\n    private getPlaceholderComment(info: NodeElementInfo) : Comment\r\n    {\r\n        if(info.placeholderComment)\r\n            return info.placeholderComment;\r\n        \r\n        info.placeholderComment = this.doc.createComment(\"_LiveDomId=\"+info.id);\r\n        this.setNodeInfo(info.placeholderComment, info);\r\n        return info.placeholderComment;\r\n    }\r\n    public renderChildNodes(parentNode: Node)\r\n    {\r\n        const t = nextId ++;\r\n        const nodes = [];\r\n        const l = parentNode.childNodes.length;\r\n        for(let i=0; i<l; ++i)\r\n            nodes.push(parentNode.childNodes[i]);\r\n        \r\n        for(let i=0; i<l; ++i)\r\n        {\r\n            const node = nodes[i];\r\n            const info = this.getNodeInfo(node);\r\n            if(!info)\r\n            {\r\n                if(node.nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                    this.renderChildNodes(node);\r\n                continue;\r\n            }\r\n            \r\n            if(info._t == t)\r\n                continue;\r\n            \r\n            info.render(node);\r\n            info._t = t;\r\n        }\r\n    }\r\n    \r\n    private setupText(text: Text)\r\n    {\r\n        const parseResult = Parser.parseText(text.data);\r\n        // console.log(\"buildNode parseText:\", parseResult, parseResult.exec({}));\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return ;\r\n        \r\n        const info: NodeTextInfo = {\r\n            id: 'LDT'+(nextId++),\r\n        };\r\n        const textExec = parseResult.exec;\r\n        \r\n        // console.log(\"buildNode:\", info, text);\r\n        info.render = (node: Text) =>\r\n        {\r\n            node.data = textExec(this.dataManager.data);\r\n        }\r\n        this.setNodeInfo(text, info);\r\n        // info.render(text);\r\n    }\r\n    \r\n    public cloneNode<N extends Node>(src: N): N\r\n    {\r\n        const des = src.cloneNode(true);\r\n        this.cloneNodesInfo([src], [des]);\r\n        return des as N;\r\n    }\r\n    private cloneNodesInfo(srcNodes: Node[]|NodeListOf<ChildNode>, desNodes: Node[]|NodeListOf<ChildNode>)\r\n    {\r\n        for(let i=0, l=srcNodes.length; i < l; ++i)\r\n        {\r\n            desNodes[i][propLiveInfo] = srcNodes[i][propLiveInfo];\r\n            \r\n            if(srcNodes[i].nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                this.cloneNodesInfo(srcNodes[i].childNodes, desNodes[i].childNodes);\r\n        }\r\n    }\r\n    \r\n    private setNodeInfo(node: Node, info: NodeInfo)\r\n    {\r\n        //weak map ?\r\n        //prop map ?\r\n        node[propLiveInfo] = info;\r\n    }\r\n    public getNodeInfo(node: Node) : NodeInfo\r\n    {\r\n        return node[propLiveInfo] || null;\r\n    }\r\n    private hasNodeInfo(node: Node) : boolean\r\n    {\r\n        return !!node[propLiveInfo];\r\n    }\r\n    private isLiveNode(node: Node) : boolean\r\n    {\r\n        return propLiveInfo in node;\r\n    }\r\n}\r\n\r\n\r\nfunction removeNode(node: Node)\r\n{\r\n    if(node.parentNode)\r\n        node.parentNode.removeChild(node);\r\n}\r\n\r\nfunction insertAfter(before: Node, node: Node)\r\n{\r\n    // console.log(\"insertAfter:\", before, node, before==node, !!before.nextSibling, !!node.parentNode);\r\n    if(before == node)\r\n        return ;\r\n    else if(before.nextSibling)\r\n        before.parentNode.insertBefore(node, before.nextSibling);\r\n    else\r\n        before.parentNode.appendChild(node);\r\n}\r\n\r\nfunction wait(ms: number) : Promise<void>\r\n{\r\n    return new Promise(function(resolve)\r\n    {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n","import { DataPaths, TypeData } from \"./DataManager\";\r\n\r\n//TODO isUseMergeData() field1!==undefined || field1.field2!==undefined || ...\r\n\r\nexport type TextFunction<R=any> = (data: TypeData) => R;\r\n\r\ninterface ParseTextResult\r\n{\r\n    // vars: string[];\r\n    parts: (string|TextFunction)[];\r\n    paths: DataPaths;\r\n    exec(data: TypeData);\r\n}\r\n\r\nexport class Parser\r\n{\r\n    public static parseText(text: string) : ParseTextResult\r\n    {\r\n        const expressionRegex = /\\$\\{\\s*([a-zA-z_]\\w*(\\.\\w+)*)\\s*\\}/g;\r\n        // console.log(\"parseText:\", text.length, text.match(expressionRegex));\r\n        const parts: (string|TextFunction)[] = [];\r\n        const paths: DataPaths = {};\r\n        let match: RegExpExecArray = null;\r\n        let lastIndex = 0;\r\n        \r\n        while(match = expressionRegex.exec(text))\r\n        {\r\n            if(lastIndex < match.index)\r\n                parts.push(text.substring(lastIndex, match.index));\r\n            \r\n            // console.log(\"parseText result:\", result, expressionRegex.lastIndex);\r\n            const names = match[1].split(/\\./g);\r\n            paths[match[1]] = names;\r\n            parts.push(buildTextFunction(names));\r\n            \r\n            lastIndex = expressionRegex.lastIndex;\r\n        }\r\n        \r\n        if(lastIndex < text.length)\r\n            parts.push(text.substring(lastIndex, text.length));\r\n        // console.log(\"parseText lastIndex:\", expressionRegex.lastIndex, parts);\r\n        \r\n        return {\r\n            parts,\r\n            paths,\r\n            exec: buildParseResultRenderer(parts),\r\n        }; \r\n    }\r\n\r\n    public static hasTextExpress(result: ParseTextResult)\r\n    {\r\n        if(result.parts.length > 1)\r\n            return true;\r\n        \r\n        return result.parts.length == 1 && typeof(result.parts[0]) != \"string\";\r\n    }\r\n}\r\n\r\n\r\n// function getWatchVars(info: ParseTextExpressionInfo): string[]\r\n// {\r\n//     // return [info.var.replace(/\\s*\\.\\s*/g, \".\")];\r\n//     return info.var.split(/\\s*\\.\\s*/, 1).slice(0, 1);\r\n// }\r\n\r\nfunction buildTextFunction(names: string[]) : TextFunction\r\n{\r\n    let lastNamePath = \"\";\r\n    let namesPath = names.map((name) =>\r\n    {\r\n        lastNamePath = lastNamePath + \".\" + name;\r\n        return lastNamePath.substring(1);\r\n    });\r\n    \r\n    // let body = \"return data\" + names.map(name => '[\"'+name+'\"]').join(\"\") + \";\";\r\n    let body = `var ${names[0]}=data.${names[0]}; `\r\n            + `return (${namesPath.map(p => `${p}!==null&&${p}!==void 0`).join(\" && \")}) ? ${names.join(\".\")} : null;`;\r\n    \r\n    // console.log(\"buildTextRenderer:\", names, namesPath, body);\r\n    return new Function(\"data\", body) as TextFunction;\r\n}\r\n\r\nfunction buildParseResultRenderer(parts: (string|TextFunction)[])\r\n{\r\n    if(parts.length == 1 && typeof(parts[0]) == \"function\")\r\n    {\r\n        return parts[0];\r\n    }\r\n    \r\n    if(parts.length == 1 && typeof(parts[0]) == \"string\")\r\n    {\r\n        const text = parts[0];\r\n        return function() { return text; };\r\n    }\r\n    \r\n    return function(data: TypeData)\r\n    {\r\n        const results: string[] = [];\r\n        for(const p of parts)\r\n        {\r\n            if(typeof(p) == \"string\")\r\n                results.push(p);\r\n            else\r\n                results.push(p(data));\r\n        }\r\n        \r\n        // console.log(\"textNodeRenderer results:\", results, data);\r\n        return results.join(\"\");\r\n    };\r\n}\r\n\r\n\r\n\r\n","import LiveDom from \"./LiveDom\";\r\n\r\n// console.log(\">>>>>>>>>>>>> LiveDom:\", LiveDom);\r\n\r\n// export function testLiveDom()\r\n// {\r\n//     console.log(\">>>>>>>>>>>>> testLiveDom:\", LiveDom);\r\n    \r\n// }\r\n\r\n// window[\"LiveDom\"] = LiveDom;\r\n\r\nexport = LiveDom;\r\n"]}