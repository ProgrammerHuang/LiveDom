{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/DataManager.ts","src/Directive.ts","src/DirectiveElementEach.ts","src/DirectiveElementElse.ts","src/DirectiveElementIf.ts","src/DirectiveElementRender.ts","src/DirectiveHtmlInputRender.ts","src/DomScanner.ts","src/DomScannerLoaded.ts","src/LiveDom.ts","src/Page.ts","src/PageController.ts","src/Parser.ts","src/main.ts"],"names":["f","exports","module","define","amd","window","global","self","this","LiveDom","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","DataManager","initData","topData","scopeDataStack","lastMergeData","pageData","Object","create","data","mergePageData","prototype","newData","assign","commitMergeData","hasUseLastMergeData","paths","pushScopeData","scopeData","push","popScopeData","pop","getPrototypeOf","Directive","controller","hasDirective","_info","info","directives","Array","isArray","_i","_a","_super","Directive_1","propLiveKeyData","Symbol","DirectiveElementEach","__extends","setup","element","config","attrs","attr","directive","removeAttribute","hasAttribute","itemName","getAttribute","indexName","render","continueRender","nodeInfo","items","attrInfo","exec","dataManager","renderElements","l","item","keyVal","itemElement","_b","exists","ele","indexOf","cloneNode","srcElement","renderInfo","__assign","getRenderInfo","itemRenderElements","_this","DirectiveElementEach_1","DirectiveElementIf_1","DirectiveElementElse","prevNode","previousSibling","isPlaceholder","prevNodeInfo","getNodeInfo","DirectiveElementIf","nodeType","DirectiveElementRender","keys","disableRenderChildNodes","attrName","attrVal","setAttribute","lastAttrsVal","renderChildNodes","DirectiveHtmlInputRender","tagName","toLocaleLowerCase","value","checked","val","DomScanner","doc","options","ignoreElementTags","script","style","observer","MutationObserver","mutationObserverCallback","bind","startObserve","observe","documentElement","subtree","childList","attributes","records","records_1","record","type","attrChanged","target","attributeName","addedNodes","forEach","node","walkNode","DomScanner_1","DomScannerLoaded","scan","scanPromise","Promise","resolve","reject","readyState","addEventListener","processElement","processText","processComment","toLowerCase","processElementStart","processChildNodes","processElementEnd","childNodes","elementStart","elementEnd","comment","text","apply","arguments","Page_1","PageController_1","initPage","PageController","document","createPage","page","Page","updateData","updatePageData","DomScannerLoaded_1","Parser_1","DataManager_1","DirectiveElementRender_1","DirectiveElementElse_1","DirectiveHtmlInputRender_1","propNodeInfo","propRenderInfo","nextId","scanCompletedPromise","requestRenderPagePromise","elementDirectivesConfig","scanner","scanElementStart","scanElementEnd","scanComment","scanText","onAttrChanged","then","onPageSetupCompleted","requestRenderPage","removeNode","parentNode","removeChild","insertAfter","before","nextSibling","insertBefore","appendChild","ms","setTimeout","renderElement","isLiveNode","setupElement","setupText","newVal","lastVal","srcVal","updateAttribute","setupElementDirectives","createAttribute","id","changed","placeholderComment","setupElementAttributes","setNodeInfo","name","parseResult","Parser","parseText","hasTextExpress","nextNode","processElementDirectiveRender","getPlaceholderComment","exists_1","prev","renderElements_1","exists_2","directiveIndex","ri","setRenderInfo","createComment","nodes","_t","textExec","src","des","cloneNodesInfo","srcNodes","desNodes","hasNodeInfo","hasRenderInfo","expressionRegex","parts","match","lastIndex","index","substring","names","split","lastNamePath","namesPath","map","body","concat","join","Function","buildTextFunction","results","parts_1","text_1","buildParseResultRenderer","result","LiveDom_1","default"],"mappings":"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","file":"livedom.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nexport type TypeData = {[k: string]: any};\r\nexport type DataPaths = {[path: string]: string[]};\r\n\r\nexport class DataManager\r\n{\r\n    public data: TypeData;\r\n    public topData: TypeData;\r\n    public pageData: TypeData;\r\n    public lastMergeData: TypeData;\r\n    private scopeDataStack: TypeData[];\r\n    \r\n    public constructor(initData: TypeData)\r\n    {\r\n        this.topData = {};\r\n        this.scopeDataStack = [];\r\n        this.lastMergeData = {};\r\n        \r\n        this.pageData = Object.create(this.topData);\r\n        this.data = Object.create(this.pageData);\r\n        \r\n        this.mergePageData(initData);\r\n    }\r\n    \r\n    public mergePageData(newData: TypeData)\r\n    {\r\n        Object.assign(this.lastMergeData, newData);\r\n        Object.assign(this.pageData, newData);\r\n    }\r\n    public commitMergeData() //like transaction commit\r\n    {\r\n        this.lastMergeData = {};\r\n    }\r\n    public hasUseLastMergeData(paths: DataPaths): boolean\r\n    {\r\n        for(const p in paths)\r\n        {\r\n            if(paths[p][0] in this.lastMergeData)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    // public hasUseLastMergeDataDeep(paths: DataPaths): boolean\r\n    // {\r\n    // }\r\n    \r\n    public pushScopeData(scopeData: TypeData)\r\n    {\r\n        this.scopeDataStack.push(scopeData);\r\n        this.data = Object.create(this.data);\r\n        Object.assign(this.data, scopeData);\r\n    }\r\n    public popScopeData(scopeData: TypeData)\r\n    {\r\n        if (this.scopeDataStack[this.scopeDataStack.length - 1] != scopeData)\r\n            throw new Error(\"popScopeData fail! scopeData not last data.\");\r\n        \r\n        this.scopeDataStack.pop();\r\n        this.data = Object.getPrototypeOf(this.data);\r\n    }\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { ElementRenderInfo, NodeElementInfo, NodeInfo } from \"./NodeInfo\";\r\n\r\nexport interface DirectiveConfig<N extends Node = Node>\r\n{\r\n    attr?: string;\r\n    setup: (controller: PageController, node: N, info: NodeInfo, config: DirectiveConfig<N>)=>void;\r\n}\r\n\r\nexport interface DirectiveRender<N extends Node = Node>\r\n{\r\n    (element: N, renderInfo: ElementRenderInfo): N[];\r\n}\r\n// class DirectiveText extends Directive\r\n// {\r\n// }\r\n\r\n\r\nexport abstract class Directive<N extends Node = Node>\r\n{\r\n    public static hasDirective(_info: NodeInfo) : boolean\r\n    {\r\n        const info = _info as NodeElementInfo;\r\n        \r\n        if(!info.directives || !Array.isArray(info.directives))\r\n            return false;\r\n        \r\n        for(const d of info.directives)\r\n        {\r\n            if(d instanceof this)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    // public name: string = null;\r\n    // public abstract buildNode(nodeInfo: NodeInfo, node: Node);\r\n    public abstract render(element: N, renderInfo: ElementRenderInfo, continueRender: DirectiveRender<N>): N[];\r\n    // public abstract unsetNode(nodeInfo: NodeInfo);\r\n    protected controller: PageController;\r\n    protected constructor(controller: PageController)\r\n    {\r\n        this.controller = controller;\r\n    }\r\n}\r\n\r\n// class DirectiveElementStateClass extends Directive //live-state=\"rendering|complete\"\r\n// {\r\n// }\r\n// class DirectiveElementContent extends Directive //live:cont\r\n// {\r\n// }\r\n\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nconst propLiveKeyData = Symbol(\"LiveDomKeyDataProp\");\r\n\r\nexport class DirectiveElementEach extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return ;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        const directive = new DirectiveElementEach(controller, element, attrInfo);\r\n        \r\n        element.removeAttribute(config.attr);\r\n        info.attrs[config.attr].directive = directive;\r\n        \r\n        if(element.hasAttribute(\"live:item\"))\r\n        {\r\n            directive.itemName = element.getAttribute(\"live:item\");\r\n            element.removeAttribute(\"live:item\");\r\n        }\r\n        \r\n        if(element.hasAttribute(\"live:index\"))\r\n        {\r\n            directive.indexName = element.getAttribute(\"live:index\");\r\n            element.removeAttribute(\"live:index\");\r\n        }\r\n        \r\n        info.directives.push(directive);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    private itemName: string = \"item\";\r\n    private indexName: string = \"index\";\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const nodeInfo = info.nodeInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const items = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        // info.directivesVal[attrLiveEach] = items;\r\n        \r\n        if(!Array.isArray(items) || items.length == 0)\r\n            return [];\r\n        \r\n        let renderElements: Element[] = [];\r\n        for(let i=0, l=items.length; i<l; ++i)\r\n        {\r\n            const item = items[i];\r\n            // console.log(\"DirectiveElementEach item:\", item);\r\n            const keyVal = item; //TODO keyGetter(item), default return item\r\n            \r\n            // console.log(\"processElementEach itemElement from exists: \", info.exists.find((ele: Element) => ele[propLiveKeyData]==keyVal && renderElements.indexOf(ele)<0));\r\n            // const itemElement = this.controller.cloneNode(elementInfo.element);\r\n            let itemElement: Element = null;\r\n            for(const ele of info.exists as Element[])\r\n            {\r\n                if(propLiveKeyData in ele && ele[propLiveKeyData] == keyVal && renderElements.indexOf(ele) < 0)\r\n                {\r\n                    // console.log(\"each propLiveKeyData:\", keyVal, ele);\r\n                    itemElement = ele;\r\n                    break;\r\n                }\r\n            }\r\n            if(!itemElement)\r\n                itemElement = this.controller.cloneNode(nodeInfo.srcElement);\r\n            \r\n            const renderInfo: ElementRenderInfo = {\r\n                ...info,\r\n                ...this.controller.getRenderInfo(itemElement) as ElementRenderInfo,\r\n            };\r\n            \r\n            itemElement[propLiveKeyData] = keyVal;\r\n            \r\n            const scopeData = { [this.itemName]: item, [this.indexName]: i };\r\n            this.controller.dataManager.pushScopeData(scopeData);\r\n            const itemRenderElements = continueRender(itemElement, renderInfo);\r\n            this.controller.dataManager.popScopeData(scopeData);\r\n            // console.log(\"itemElement html:\", item, itemElement.innerHTML);\r\n            \r\n            if (itemRenderElements.length > 0)\r\n                renderElements.push(itemRenderElements[0]);\r\n        }\r\n        \r\n        return renderElements;\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementElse extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if (!element.hasAttribute(config.attr))\r\n            return ;\r\n        \r\n        const directive = new DirectiveElementElse(controller, element);\r\n        element.removeAttribute(config.attr);\r\n        \r\n        if(info.attrs[config.attr])\r\n            info.attrs[config.attr].directive = directive;\r\n        \r\n        info.directives.push(directive);\r\n    }\r\n    \r\n    // private element: Element;\r\n    protected constructor(controller: PageController, element: Element)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementElse renderNode:\", element, element.previousElementSibling, info);\r\n        let prevNode: Node = info.exists[0];\r\n        while(prevNode = prevNode.previousSibling)\r\n        {\r\n            // console.log(\"DirectiveElementElse find prev:\", this.controller.isPlaceholder(prevNode), prevNode);\r\n            if(this.controller.isPlaceholder(prevNode))\r\n            {\r\n                const prevNodeInfo = this.controller.getNodeInfo(prevNode);\r\n                if(DirectiveElementIf.hasDirective(prevNodeInfo) || DirectiveElementEach.hasDirective(prevNodeInfo))\r\n                    return continueRender(element, info);\r\n                \r\n                break;\r\n            }\r\n            \r\n            if(prevNode.nodeType == 1) //1: Node.ELEMENT_NODE\r\n                break;\r\n        }\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementIf extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return ;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        const directive = new DirectiveElementIf(controller, element, attrInfo);\r\n        \r\n        element.removeAttribute(config.attr);\r\n        info.attrs[config.attr].directive = directive;\r\n        info.directives.push(directive);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        // const elementInfo = info.nodeInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const val = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        if (val)\r\n            return continueRender(element, info);\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementRender extends Directive // rename to DirectiveElementNormalAttributes\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if(Object.keys(info.attrs).length == 0 && info.directives.length == 0)\r\n            return ;\r\n        \r\n        const directive = new DirectiveElementRender(controller);\r\n        info.directives.push(directive);\r\n    }\r\n    \r\n    public static disableRenderChildNodes(renderInfo: ElementRenderInfo)\r\n    {\r\n        \r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementRender renderNode:\", element, info);\r\n        const nodeInfo = info.nodeInfo;\r\n        \r\n        for (const attrName in nodeInfo.attrs)\r\n        {\r\n            // if has custom element and xxxxx()\r\n            // else if attrVal != attr.value\r\n            const attrInfo = nodeInfo.attrs[attrName];\r\n            if(attrInfo.directive)\r\n                continue ;\r\n            \r\n            const attrVal = attrInfo.exec(this.controller.dataManager.data);\r\n            element.setAttribute(attrName, attrVal);\r\n            info.lastAttrsVal[attrName] = attrVal;\r\n        }\r\n        \r\n        this.controller.renderChildNodes(element);\r\n        \r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo, AttrInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\ntype AttrsInfoMap = {[name: string]: AttrInfo};\r\n\r\nexport class DirectiveHtmlInputRender extends Directive\r\n{\r\n    public static setup(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig)\r\n    {\r\n        if(element.tagName.toLocaleLowerCase() != \"input\")\r\n            return null;\r\n        \r\n        const attrs: AttrsInfoMap = {};\r\n        \r\n        if(element.hasAttribute(\"value\") && info.attrs.value)\r\n        {\r\n            attrs.value = info.attrs.value;\r\n            element.removeAttribute(\"value\");\r\n            delete info.attrs.value;\r\n        }\r\n        \r\n        if(element.hasAttribute(\"checked\") && info.attrs.checked)\r\n        {\r\n            attrs.checked = info.attrs.checked;\r\n            element.removeAttribute(\"checked\");\r\n            delete info.attrs.checked;\r\n        }\r\n        \r\n        if(Object.keys(attrs).length > 0)\r\n        {\r\n            info.directives.push(new DirectiveHtmlInputRender(controller, element, attrs));\r\n        }\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrs: AttrsInfoMap;\r\n\r\n    protected constructor(controller: PageController, element: Element, attrs: AttrsInfoMap)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrs = attrs;\r\n    }\r\n\r\n    public render(element: HTMLInputElement, info: HtmlInputRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        \r\n        if(this.attrs.value && this.controller.dataManager.hasUseLastMergeData(this.attrs.value.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.value.exec(this.controller.dataManager.data);\r\n            element.setAttribute(\"value\", val);\r\n            element.value = val;\r\n        }\r\n        \r\n        if(this.attrs.checked && this.controller.dataManager.hasUseLastMergeData(this.attrs.checked.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.checked.exec(this.controller.dataManager.data);\r\n            // element.setAttribute(\"value\", val);\r\n            element.checked = !!val;\r\n        }\r\n        \r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n\r\ninterface HtmlInputRenderInfo extends ElementRenderInfo\r\n{\r\n    \r\n}\r\n","\r\n\r\nexport interface DomScannerOptions\r\n{\r\n    elementStart(element: Element): void;\r\n    elementEnd(element: Element): void;\r\n    comment(comment: Comment): void;\r\n    text(text: Text): void;\r\n    attrChanged(element: Element, attrName: string): void;\r\n    // elementAdd(element: Element): void;\r\n}\r\n\r\nexport abstract class DomScanner\r\n{\r\n    protected doc: Document;\r\n    protected observer: MutationObserver;\r\n    protected options: DomScannerOptions;\r\n    protected ignoreElementTags = {script: true, style: true};\r\n\r\n    public constructor(doc: Document, options: DomScannerOptions)\r\n    {\r\n        this.options = options;\r\n        this.doc = doc;\r\n        this.observer = new MutationObserver(this.mutationObserverCallback.bind(this));\r\n    }\r\n    \r\n    public abstract scan(): Promise<void>;\r\n    protected abstract walkNode(node: Node) : void;\r\n    \r\n    protected startObserve()\r\n    {\r\n        const options: MutationObserverInit = {\r\n            subtree: true,\r\n            childList: true,\r\n            attributes: true,\r\n            // characterData: true,\r\n        };\r\n        this.observer.observe(this.doc.documentElement, options);\r\n    }\r\n    private mutationObserverCallback(records: MutationRecord[])\r\n    {\r\n        // console.log(\"mutationObserverCallback:\", records);\r\n        //TODO setup\r\n        //TODO notify parents update, and rerender\r\n        // updateAttr|Element|Text\r\n        let addedNodes = [];\r\n        for(const record of records)\r\n        {\r\n            // record.addedNodes.forEach((node) =>\r\n            // {\r\n            //     console.log(\"mutationObserver addedNode:\", node);\r\n            //     if(addedNodes.indexOf(node) < 0)\r\n            //         addedNodes.push(node);\r\n            //     else\r\n            //         console.log(\"mutationObserver addedNode duplicated:\", node);\r\n            // });\r\n            // continue;\r\n            \r\n            // console.log(\"mutationObserver\", record.type, record.target, record.addedNodes, record.removedNodes);\r\n            switch(record.type)\r\n            {\r\n            // case \"characterData\": //don't observe\r\n            //     // if(record.target.nodeType == 3) //TEXT_NODE\r\n            //         this.options.textChanged(record.target as Text);\r\n            //     break;\r\n                \r\n            case \"attributes\":\r\n                // console.log(\"mutationObserver attributes:\", record.attributeName, record.target);\r\n                this.options.attrChanged(record.target as Element, record.attributeName);\r\n                break;\r\n                \r\n            case \"childList\":\r\n                // TODO scan inside\r\n                record.addedNodes.forEach((node) =>\r\n                {\r\n                    this.walkNode(node);\r\n                });\r\n                break;\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n","import { DomScanner } from \"./DomScanner\";\r\n\r\nexport class DomScannerLoaded extends DomScanner\r\n{\r\n    protected scanPromise: Promise<void> = null;\r\n\r\n    public scan(): Promise<void>\r\n    {\r\n        if (this.scanPromise)\r\n            return this.scanPromise;\r\n        \r\n        return this.scanPromise = new Promise<void>((resolve, reject) =>\r\n        {\r\n            if (this.doc.readyState == \"complete\")\r\n            {\r\n                this.walkNode(this.doc.documentElement);\r\n                this.startObserve();\r\n                resolve();\r\n            }\r\n            else\r\n            {\r\n                this.doc.addEventListener(\"DOMContentLoaded\", () =>\r\n                {\r\n                    this.walkNode(this.doc.documentElement);\r\n                    this.startObserve();\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    protected walkNode(node: Node)\r\n    {\r\n        // console.log(\"walk node:\", node, this.isCompletedNode(node));\r\n        switch (node.nodeType)\r\n        {\r\n            case 1: //ELEMENT_NODE\r\n                this.processElement(node as Element);\r\n                break;\r\n            case 3: //TEXT_NODE\r\n                this.processText(node as Text);\r\n                break;\r\n            // case 4: //CDATA_SECTION_NODE\r\n            //     if(childInfo = initText(controller, node as Text))\r\n            //     {\r\n            //         info.watch = info.watch.concat(childInfo.watch);\r\n            //     }\r\n            //     break;\r\n            case 8: //COMMENT_NODE\r\n                this.processComment(node as Comment);\r\n                break;\r\n            // default : //Not support type\r\n            //     break;\r\n        }\r\n        \r\n    }\r\n    \r\n    protected processElement(element: Element)\r\n    {\r\n        // console.log(\"process element:\", element);\r\n        if (this.ignoreElementTags[element.tagName.toLowerCase()])\r\n            return;\r\n\r\n        // if(this.incompleteNodes.indexOf(element) < 0)\r\n        this.processElementStart(element);\r\n        this.processChildNodes(element);\r\n        this.processElementEnd(element);\r\n    }\r\n    \r\n    protected processChildNodes(element: Element)\r\n    {\r\n        element.childNodes.forEach((node: Node) =>\r\n        {\r\n            this.walkNode(node);\r\n        });\r\n    }\r\n\r\n    protected processElementStart(element: Element)\r\n    {\r\n        // console.log(\"processElementStart:\", element);\r\n        this.options.elementStart(element);\r\n    }\r\n    protected processElementEnd(element: Element)\r\n    {\r\n        // console.log(\"processElementEnd:\", element);\r\n        this.options.elementEnd(element);\r\n    }\r\n    protected processComment(node: Comment)\r\n    {\r\n        // console.log(\"processComment:\", node);\r\n        this.options.comment(node);\r\n    }\r\n    protected processText(node: Text)\r\n    {\r\n        // console.log(\"processText:\", node);\r\n        this.options.text(node);\r\n    }\r\n}\r\n","import { createPage, Page, PageOptions } from \"./Page\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport default class LiveDom\r\n{\r\n    public static initPage(options: PageOptions = {}) : Page\r\n    {\r\n        const controller = new PageController(document, options);\r\n        return createPage(controller);\r\n    }\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\nimport { PageController } from \"./PageController\";\r\n\r\n //TODO singleton for page, and life in doc\r\n\r\nexport interface PageOptions\r\n{\r\n    // container?: Element|string;\r\n    data?: TypeData; //init data\r\n    // directives?: MapObject<DirectiveOptions>;\r\n    onPageSetupCompleted?: ()=>void;\r\n    // debug?: boolean;\r\n}\r\n\r\nexport function createPage(controller: PageController) : Page\r\n{\r\n    const page = new Page();\r\n    \r\n    page.updateData = controller.updatePageData.bind(controller);\r\n    \r\n    return page;\r\n}\r\n\r\nexport class Page\r\n{\r\n    public updateData: (data: TypeData) => Promise<void>;\r\n    // public onReady: (callback: ()=>void) => void;\r\n}\r\n\r\n","import { DomScanner } from \"./DomScanner\";\r\nimport { DomScannerLoaded } from \"./DomScannerLoaded\";\r\nimport { Parser } from \"./Parser\";\r\nimport { PageOptions } from \"./Page\";\r\nimport { DataManager, TypeData } from \"./DataManager\";\r\nimport { AttrInfo, ElementRenderInfo, NodeElementInfo, NodeInfo, NodeTextInfo, RenderInfo } from \"./NodeInfo\";\r\nimport { Directive, DirectiveConfig } from \"./Directive\";\r\nimport { DirectiveElementRender } from \"./DirectiveElementRender\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { DirectiveElementElse } from \"./DirectiveElementElse\";\r\nimport { DirectiveHtmlInputRender } from \"./DirectiveHtmlInputRender\";\r\n\r\nconst propNodeInfo = Symbol(\"LiveDomNodeInfoProp\");\r\nconst propRenderInfo = Symbol(\"LiveDomRenderInfoProp\");\r\nconst attrLiveName = \"_ld\";\r\nconst attrLiveEach = \"live:each\";\r\nconst attrLiveIf = \"live:if\";\r\nconst attrLiveElse = \"live:else\";\r\nlet nextId = 1001;\r\n\r\nexport class PageController\r\n{\r\n    public doc: Document;\r\n    public options: PageOptions;\r\n    public dataManager: DataManager;\r\n    public scanCompletedPromise: Promise<void> = null;\r\n    \r\n    private scanner: DomScanner;\r\n    private elementDirectivesConfig: DirectiveConfig<Element>[];\r\n    // private directiveText: DirectiveText;\r\n    // private nodeInfos: MapObject<NodeInfo>;\r\n    private requestRenderPagePromise: Promise<void> = null;\r\n    \r\n    public constructor(doc: Document, options: PageOptions)\r\n    {\r\n        this.doc = doc;\r\n        this.options = options;\r\n        this.dataManager = new DataManager(this.options.data || {});\r\n        this.elementDirectivesConfig = [\r\n            {attr: attrLiveEach, setup: DirectiveElementEach.setup, },\r\n            {attr: attrLiveIf, setup: DirectiveElementIf.setup, },\r\n            {attr: attrLiveElse, setup: DirectiveElementElse.setup, },\r\n            {attr: null, setup: DirectiveHtmlInputRender.setup, },\r\n            {attr: null, setup: DirectiveElementRender.setup, }, //must last one\r\n        ];\r\n        // this.directiveText = new DirectiveText();\r\n        // this.nodeInfos = {};\r\n        \r\n        this.scanner = new DomScannerLoaded(document, {\r\n            elementStart: this.scanElementStart.bind(this),\r\n            elementEnd: this.scanElementEnd.bind(this),\r\n            comment: this.scanComment.bind(this),\r\n            text: this.scanText.bind(this),\r\n            attrChanged: this.onAttrChanged.bind(this),\r\n        });\r\n        \r\n        this.scanCompletedPromise = this.scanner.scan().\r\n        then(() =>\r\n        {\r\n            if(this.options.onPageSetupCompleted)\r\n                this.options.onPageSetupCompleted();\r\n            \r\n            this.requestRenderPage();\r\n        });\r\n    }\r\n    \r\n    public updatePageData(data: TypeData = {}) : Promise<void>\r\n    {\r\n        // console.log(\"updatePageData:\", data);\r\n        this.dataManager.mergePageData(data);\r\n        return this.requestRenderPage();\r\n    }\r\n    private requestRenderPage() : Promise<void>\r\n    {\r\n        if(this.requestRenderPagePromise)\r\n            return this.requestRenderPagePromise;\r\n        \r\n        return this.requestRenderPagePromise = this.scanCompletedPromise.\r\n        then(() => wait(5)).\r\n        then(() =>\r\n        {\r\n            this.requestRenderPagePromise = null;\r\n            this.renderElement(this.doc.documentElement);\r\n            this.dataManager.commitMergeData();\r\n        });\r\n    }\r\n    \r\n    private scanElementStart(element: Element) : void\r\n    {\r\n        // console.log(\"elementStart:\", element);\r\n        if(this.isLiveNode(element))\r\n            return ;\r\n        \r\n        this.setupElement(element);\r\n    }\r\n    private scanElementEnd(element: Element) : void\r\n    {\r\n        // this.renderElement(element);\r\n    }\r\n    private scanComment(comment: Comment) : void\r\n    {\r\n        // console.log(\"comment:\", comment);\r\n    }\r\n    private scanText(text: Text) : void\r\n    {\r\n        // console.log(\"text:\", text);\r\n        if(this.isLiveNode(text))\r\n            return ;\r\n        \r\n        this.setupText(text);\r\n    }\r\n    \r\n    private onAttrChanged(element: Element, attrName: string)\r\n    {\r\n        const nodeInfo = this.getNodeInfo(element) as NodeElementInfo;\r\n        if(!nodeInfo)\r\n            return this.setupElement(element);\r\n        \r\n        const renderInfo = this.getRenderInfo(element) as ElementRenderInfo;\r\n        const newVal = element.getAttribute(attrName);\r\n        let attrInfo = nodeInfo.attrs[attrName];\r\n        \r\n        // console.log(\"onAttrChanged:\", attrName, info?.attrs[attrName]?.srcVal, newVal, info?.attrs[attrName]?.srcVal==newVal);\r\n        // console.log(\"onAttrChanged:\", attrName, info?.attrs[attrName]?.srcVal, newVal, info, element);\r\n        \r\n        if(!attrInfo) // not live attr\r\n        {\r\n            if(newVal && (attrInfo = this.createAttribute(newVal)))\r\n            {\r\n                nodeInfo.attrs[attrName] = attrInfo;\r\n                this.setupElementDirectives(element, nodeInfo);\r\n            }\r\n            return ;\r\n        }\r\n        \r\n        if(newVal == attrInfo.lastVal) //skip, change by render\r\n            return ;\r\n        \r\n        if(!newVal) // attr removed\r\n        {\r\n            delete nodeInfo.attrs[attrName];\r\n            this.setupElementDirectives(element, nodeInfo);\r\n            return ;\r\n        }\r\n        \r\n        if(attrInfo.srcVal != newVal) //attr really changed\r\n        {\r\n            attrInfo = this.updateAttribute(attrInfo, newVal);\r\n            if(!attrInfo)\r\n                delete nodeInfo.attrs[attrName];\r\n            \r\n            this.setupElementDirectives(element, nodeInfo);\r\n            return ;\r\n        }\r\n    }\r\n    \r\n    \r\n    private setupElement(element: Element)\r\n    {\r\n        const info: NodeElementInfo = this.getNodeInfo(element) as NodeElementInfo || {\r\n            id: 'LDE'+(nextId++),\r\n            changed: true,\r\n            srcElement: element,\r\n            placeholderComment: null,\r\n            attrs: {},\r\n            directives: [],\r\n        };\r\n        \r\n        // console.log(\"DirectiveElement build node:\", nodeInfo, node);\r\n        this.setupElementAttributes(element, info);\r\n        this.setupElementDirectives(element, info);\r\n        \r\n        if(Object.keys(info.attrs).length == 0 && info.directives.length == 0)\r\n        {\r\n            this.setNodeInfo(element, null);\r\n            return ;\r\n        }\r\n        \r\n        info.render = this.renderElement.bind(this);\r\n        this.setNodeInfo(element, info);\r\n    }\r\n    private setupElementAttributes(element: Element, info: NodeElementInfo)\r\n    {\r\n        const attrs = element.attributes;\r\n        for(let i=attrs.length-1; i>=0; --i)\r\n        {\r\n            const attr = attrs[i];\r\n            // if(info.attrs[attr.name] && info.attrs[attr.name].srcVal == attr.value)\r\n            //     continue;\r\n            \r\n            const attrInfo = this.createAttribute(attr.value);\r\n            // console.log(\"initElement attribute:\", attr, attrInfo);\r\n            if(attrInfo)\r\n                info.attrs[attr.name] = attrInfo;\r\n            else\r\n                delete info.attrs[attr.name];\r\n        }\r\n    }\r\n    private createAttribute(attrVal: string) : AttrInfo\r\n    {\r\n        const parseResult = Parser.parseText(attrVal);\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return null;\r\n        \r\n        const exec = parseResult.exec;\r\n        const info = {\r\n            srcVal: attrVal,\r\n            lastVal: attrVal,\r\n            paths: parseResult.paths,\r\n            exec: function(data) { return info.lastVal = exec(data); },\r\n            directive: null,\r\n        };\r\n        \r\n        return info;\r\n    }\r\n    private updateAttribute(info: AttrInfo, attrVal)\r\n    {\r\n        const parseResult = Parser.parseText(attrVal);\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return null;\r\n        \r\n        const exec = parseResult.exec;\r\n        info.exec = function(data) { return info.lastVal = exec(data); };\r\n        info.srcVal = attrVal;\r\n        info.lastVal = attrVal;\r\n        \r\n        return info;\r\n    }\r\n    private setupElementDirectives(element: Element, info: NodeElementInfo)\r\n    {\r\n        info.directives = [];\r\n        \r\n        for(const config of this.elementDirectivesConfig)\r\n        {\r\n            config.setup(this, element, info, config);\r\n        }\r\n    }\r\n    private renderElement(element: Element)\r\n    {\r\n        const nodeInfo = this.getNodeInfo(element) as NodeElementInfo;\r\n        // console.log(\"renderElement:\", placeholder, this.isLiveNode(placeholder), elementInfo);\r\n        if(! nodeInfo)\r\n        {\r\n            this.renderChildNodes(element);\r\n            return ;\r\n        }\r\n        \r\n        const exists: Node[] = [element];\r\n        let nextNode = element.nextSibling;\r\n        while(nextNode)\r\n        {\r\n            const nextInfo = this.getNodeInfo(nextNode);\r\n            if(nextInfo != nodeInfo)\r\n                break;\r\n            \r\n            exists.push(nextNode);\r\n            nextNode = nextNode.nextSibling;\r\n        }\r\n        // console.log(\"renderElement exists:\", placeholder, exists, exists.map(n => n.parentNode));\r\n        \r\n        const renderInfo: ElementRenderInfo = {\r\n            lastAttrsVal: {},\r\n            ...this.getRenderInfo(element) as ElementRenderInfo,\r\n            nodeInfo: nodeInfo,\r\n            exists,\r\n        };\r\n        \r\n        const srcElement = element.nodeType==1 ? element : nodeInfo.srcElement;\r\n        const renderElements = this.processElementDirectiveRender(srcElement, renderInfo, 0);\r\n        // console.log(\"renderElement renderElements:\", placeholder, placeholder.parentNode, element, renderElements, renderInfo);\r\n        if(renderElements.length == 0)\r\n        {\r\n            // console.log(\"renderElement renderElements remove:\", exists.length, element.parentNode, element);\r\n            const placeholderComment = this.getPlaceholderComment(nodeInfo);\r\n            insertAfter(element, placeholderComment);\r\n            // console.log(\"renderElement placeholderComment:\", placeholder, placeholder.parentNode, placeholderComment, exists);\r\n            for(const ele of exists)\r\n            {\r\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>> removeNode:\", placeholder, ele != placeholderComment, ele.parentNode, ele);\r\n                if(ele != placeholderComment)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let prev = element;\r\n            for(const ele of renderElements)\r\n            {\r\n                insertAfter(prev, ele);\r\n                prev = ele;\r\n            }\r\n            \r\n            for(const ele of exists)\r\n            {\r\n                if(renderElements.indexOf(ele as Element) < 0)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n    }\r\n    private processElementDirectiveRender(element: Element, renderInfo: ElementRenderInfo, directiveIndex: number) : Element[]\r\n    {\r\n        const directives = renderInfo.nodeInfo.directives;\r\n        \r\n        if(directiveIndex < directives.length)\r\n        {\r\n            return directives[directiveIndex].render(\r\n                element,\r\n                renderInfo, \r\n                (ele: Element, ri: ElementRenderInfo) => this.processElementDirectiveRender(ele, ri, directiveIndex+1)\r\n            );\r\n        }\r\n        \r\n        this.setRenderInfo(element, renderInfo);\r\n        return [element];\r\n    }\r\n    public isPlaceholder(node: Node) : boolean\r\n    {\r\n        if(node.nodeType != 8) //8: Node.COMMENT_NODE\r\n            return false;\r\n        \r\n        const info = this.getRenderInfo(node) as PlaceholderRenderInfo;\r\n        return !!info && !!info.isPlaceholder;\r\n    }\r\n    private getPlaceholderComment(info: NodeElementInfo) : Comment\r\n    {\r\n        if(info.placeholderComment)\r\n            return info.placeholderComment;\r\n        \r\n        const placeholderComment = this.doc.createComment(\"_LiveDomId=\"+info.id);\r\n        const renderInfo: PlaceholderRenderInfo = {nodeInfo: info, isPlaceholder: true};\r\n        //TODO placeholderComment.renderInfo = {isPlaceholder}\r\n        // info.placeholderComment = placeholderComment;\r\n        this.setNodeInfo(placeholderComment, info);\r\n        this.setRenderInfo(placeholderComment, renderInfo);\r\n        return placeholderComment;\r\n    }\r\n    public renderChildNodes(parentNode: Node) //TODO move to DirectiveElementChildNodes\r\n    {\r\n        const t = nextId ++;\r\n        const nodes = [];\r\n        const l = parentNode.childNodes.length;\r\n        for(let i=0; i<l; ++i)\r\n            nodes.push(parentNode.childNodes[i]);\r\n        \r\n        for(let i=0; i<l; ++i)\r\n        {\r\n            const node = nodes[i];\r\n            const info = this.getNodeInfo(node);\r\n            if(!info)\r\n            {\r\n                if(node.nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                    this.renderChildNodes(node);\r\n                continue;\r\n            }\r\n            \r\n            if(info._t == t)\r\n                continue;\r\n            \r\n            info.render(node);\r\n            info.changed = false;\r\n            info._t = t;\r\n        }\r\n    }\r\n    \r\n    private setupText(text: Text)\r\n    {\r\n        const parseResult = Parser.parseText(text.data);\r\n        // console.log(\"buildNode parseText:\", parseResult, parseResult.exec({}));\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return ;\r\n        \r\n        const info: NodeTextInfo = {\r\n            id: 'LDT'+(nextId++),\r\n            changed: true,\r\n        };\r\n        const textExec = parseResult.exec;\r\n        \r\n        // console.log(\"buildNode:\", info, text);\r\n        info.render = (node: Text) =>\r\n        {\r\n            node.data = textExec(this.dataManager.data);\r\n        }\r\n        this.setNodeInfo(text, info);\r\n        // info.render(text);\r\n    }\r\n    \r\n    public cloneNode<N extends Node>(src: N): N\r\n    {\r\n        const des = src.cloneNode(true);\r\n        this.cloneNodesInfo([src], [des]);\r\n        return des as N;\r\n    }\r\n    private cloneNodesInfo(srcNodes: Node[]|NodeListOf<ChildNode>, desNodes: Node[]|NodeListOf<ChildNode>)\r\n    {\r\n        for(let i=0, l=srcNodes.length; i < l; ++i)\r\n        {\r\n            desNodes[i][propNodeInfo] = srcNodes[i][propNodeInfo];\r\n            \r\n            if(srcNodes[i].nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                this.cloneNodesInfo(srcNodes[i].childNodes, desNodes[i].childNodes);\r\n        }\r\n    }\r\n    \r\n    private setNodeInfo(node: Node, info: NodeInfo)\r\n    {\r\n        //weak map ?\r\n        //prop map ?\r\n        node[propNodeInfo] = info;\r\n    }\r\n    public getNodeInfo(node: Node) : NodeInfo\r\n    {\r\n        return node[propNodeInfo] || null;\r\n    }\r\n    private hasNodeInfo(node: Node) : boolean\r\n    {\r\n        return !!node[propNodeInfo];\r\n    }\r\n    \r\n    private setRenderInfo(node: Node, info: RenderInfo)\r\n    {\r\n        //weak map ?\r\n        //prop map ?\r\n        node[propRenderInfo] = info;\r\n    }\r\n    public getRenderInfo(node: Node) : RenderInfo\r\n    {\r\n        return node[propRenderInfo] || null;\r\n    }\r\n    private hasRenderInfo(node: Node) : boolean\r\n    {\r\n        return !!node[propRenderInfo];\r\n    }\r\n    \r\n    private isLiveNode(node: Node) : boolean\r\n    {\r\n        return propNodeInfo in node; //TODO use renderInfo\r\n    }\r\n}\r\n\r\ninterface PlaceholderRenderInfo extends RenderInfo\r\n{\r\n    isPlaceholder: boolean;\r\n}\r\n\r\nfunction removeNode(node: Node)\r\n{\r\n    if(node.parentNode)\r\n        node.parentNode.removeChild(node);\r\n}\r\n\r\nfunction insertAfter(before: Node, node: Node)\r\n{\r\n    // console.log(\"insertAfter:\", before, node, before==node, !!before.nextSibling, !!node.parentNode);\r\n    if(before == node)\r\n        return ;\r\n    else if(before.nextSibling)\r\n        before.parentNode.insertBefore(node, before.nextSibling);\r\n    else\r\n        before.parentNode.appendChild(node);\r\n}\r\n\r\nfunction wait(ms: number) : Promise<void>\r\n{\r\n    return new Promise(function(resolve)\r\n    {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n","import { DataPaths, TypeData } from \"./DataManager\";\r\n\r\nexport type TextFunction<R=any> = (data: TypeData) => R;\r\n\r\ninterface ParseTextResult\r\n{\r\n    // vars: string[];\r\n    parts: (string|TextFunction)[];\r\n    paths: DataPaths;\r\n    exec(data: TypeData);\r\n}\r\n\r\nexport class Parser\r\n{\r\n    public static parseText(text: string) : ParseTextResult\r\n    {\r\n        const expressionRegex = /\\$\\{\\s*([a-zA-z_]\\w*(\\.\\w+)*)\\s*\\}/g;\r\n        // console.log(\"parseText:\", text.length, text.match(expressionRegex));\r\n        const parts: (string|TextFunction)[] = [];\r\n        const paths: DataPaths = {};\r\n        let match: RegExpExecArray = null;\r\n        let lastIndex = 0;\r\n        \r\n        while(match = expressionRegex.exec(text))\r\n        {\r\n            if(lastIndex < match.index)\r\n                parts.push(text.substring(lastIndex, match.index));\r\n            \r\n            // console.log(\"parseText result:\", result, expressionRegex.lastIndex);\r\n            const names = match[1].split(/\\./g);\r\n            paths[match[1]] = names;\r\n            parts.push(buildTextFunction(names));\r\n            \r\n            lastIndex = expressionRegex.lastIndex;\r\n        }\r\n        \r\n        if(lastIndex < text.length)\r\n            parts.push(text.substring(lastIndex, text.length));\r\n        // console.log(\"parseText lastIndex:\", expressionRegex.lastIndex, parts);\r\n        \r\n        return {\r\n            parts,\r\n            paths,\r\n            exec: buildParseResultRenderer(parts),\r\n        }; \r\n    }\r\n\r\n    public static hasTextExpress(result: ParseTextResult)\r\n    {\r\n        if(result.parts.length > 1)\r\n            return true;\r\n        \r\n        return result.parts.length == 1 && typeof(result.parts[0]) != \"string\";\r\n    }\r\n}\r\n\r\n\r\n// function getWatchVars(info: ParseTextExpressionInfo): string[]\r\n// {\r\n//     // return [info.var.replace(/\\s*\\.\\s*/g, \".\")];\r\n//     return info.var.split(/\\s*\\.\\s*/, 1).slice(0, 1);\r\n// }\r\n\r\nfunction buildTextFunction(names: string[]) : TextFunction\r\n{\r\n    let lastNamePath = \"\";\r\n    let namesPath = names.map((name) =>\r\n    {\r\n        lastNamePath = lastNamePath + \".\" + name;\r\n        return lastNamePath.substring(1);\r\n    });\r\n    \r\n    // let body = \"return data\" + names.map(name => '[\"'+name+'\"]').join(\"\") + \";\";\r\n    let body = `var ${names[0]}=data.${names[0]}; `\r\n            + `return (${namesPath.map(p => `${p}!==null&&${p}!==void 0`).join(\" && \")}) ? ${names.join(\".\")} : null;`;\r\n    \r\n    // console.log(\"buildTextRenderer:\", names, namesPath, body);\r\n    return new Function(\"data\", body) as TextFunction;\r\n}\r\n\r\nfunction buildParseResultRenderer(parts: (string|TextFunction)[])\r\n{\r\n    if(parts.length == 1 && typeof(parts[0]) == \"function\")\r\n    {\r\n        return parts[0];\r\n    }\r\n    \r\n    if(parts.length == 1 && typeof(parts[0]) == \"string\")\r\n    {\r\n        const text = parts[0];\r\n        return function() { return text; };\r\n    }\r\n    \r\n    return function(data: TypeData)\r\n    {\r\n        const results: string[] = [];\r\n        for(const p of parts)\r\n        {\r\n            if(typeof(p) == \"string\")\r\n                results.push(p);\r\n            else\r\n                results.push(p(data));\r\n        }\r\n        \r\n        // console.log(\"textNodeRenderer results:\", results, data);\r\n        return results.join(\"\");\r\n    };\r\n}\r\n\r\n\r\n\r\n","import LiveDom from \"./LiveDom\";\r\n\r\n// console.log(\">>>>>>>>>>>>> LiveDom:\", LiveDom);\r\n\r\n// export function testLiveDom()\r\n// {\r\n//     console.log(\">>>>>>>>>>>>> testLiveDom:\", LiveDom);\r\n    \r\n// }\r\n\r\n// window[\"LiveDom\"] = LiveDom;\r\n\r\nexport = LiveDom;\r\n"]}