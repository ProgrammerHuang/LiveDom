{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/DataManager.ts","src/Directive.ts","src/DirectiveElementEach.ts","src/DirectiveElementElse.ts","src/DirectiveElementIf.ts","src/DirectiveElementRender.ts","src/DirectiveHtmlInputRender.ts","src/DomScanner.ts","src/DomScannerLoaded.ts","src/LiveDom.ts","src/Page.ts","src/PageController.ts","src/Parser.ts","src/main.ts"],"names":["f","exports","module","define","amd","window","global","self","this","LiveDom","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","DataManager","initData","topData","scopeDataStack","lastMergeData","pageData","Object","create","data","mergePageData","prototype","newData","assign","commitMergeData","hasUseLastMergeData","paths","pushScopeData","scopeData","push","popScopeData","pop","getPrototypeOf","Directive","controller","hasDirective","_info","info","directives","Array","isArray","_i","_a","_super","Directive_1","propLiveKeyData","Symbol","DirectiveElementEach","__extends","element","config","attrs","attr","attrInfo","directive","removeAttribute","hasAttribute","itemName","getAttribute","indexName","render","continueRender","elementInfo","items","exec","dataManager","renderElements","l","item","keyVal","itemElement","exists","find","ele","indexOf","this_1","cloneNode","itemRenderElements","_this","DirectiveElementEach_1","DirectiveElementIf_1","DirectiveElementElse","prevNode","previousSibling","isPlaceholder","prevNodeInfo","getNodeInfo","DirectiveElementIf","nodeType","DirectiveElementRender","attrName","attrVal","setAttribute","renderChildNodes","DirectiveHtmlInputRender","tagName","toLocaleLowerCase","value","checked","keys","val","DomScanner","doc","options","ignoreElementTags","script","style","observer","MutationObserver","mutationObserverCallback","bind","mutationList","DomScanner_1","DomScannerLoaded","scan","scanPromise","Promise","resolve","reject","readyState","walkNode","documentElement","observe","subtree","childList","attributes","characterData","addEventListener","node","processElement","processText","processComment","toLowerCase","processElementStart","childNodes","forEach","processElementEnd","elementStart","elementEnd","comment","text","apply","arguments","Page_1","PageController_1","initPage","PageController","document","createPage","page","Page","updateData","updatePageData","DomScannerLoaded_1","Parser_1","DataManager_1","DirectiveElementRender_1","DirectiveElementElse_1","DirectiveHtmlInputRender_1","propLiveInfo","nextId","scanCompletedPromise","requestRenderPagePromise","elementDirectivesConfig","scanner","scanElementStart","scanElementEnd","scanComment","scanText","then","onPageSetupCompleted","requestRenderPage","removeNode","parentNode","removeChild","insertAfter","before","nextSibling","insertBefore","appendChild","ms","setTimeout","renderElement","setupElement","setupText","id","placeholderComment","setupAttribute","name","setupElementDirectives","setNodeInfo","srcVal","parseResult","Parser","parseText","hasTextExpress","placeholder","nextNode","processElementDirectiveRender","getPlaceholderComment","exists_1","prev","renderElements_1","_b","exists_2","renderInfo","directiveIndex","createComment","nodes","_t","textExec","src","des","cloneNodesInfo","srcNodes","desNodes","hasNodeInfo","isLiveNode","expressionRegex","parts","match","lastIndex","index","substring","names","split","lastNamePath","namesPath","map","body","concat","join","Function","buildTextFunction","results","parts_1","text_1","buildParseResultRenderer","result","LiveDom_1","default"],"mappings":"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","file":"livedom.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nexport type TypeData = {[k: string]: any};\r\nexport type DataPaths = {[path: string]: string[]};\r\n\r\nexport class DataManager\r\n{\r\n    public data: TypeData;\r\n    public topData: TypeData;\r\n    public pageData: TypeData;\r\n    public lastMergeData: TypeData;\r\n    private scopeDataStack: TypeData[];\r\n    \r\n    public constructor(initData: TypeData)\r\n    {\r\n        this.topData = {};\r\n        this.scopeDataStack = [];\r\n        this.lastMergeData = {};\r\n        \r\n        this.pageData = Object.create(this.topData);\r\n        this.data = Object.create(this.pageData);\r\n        \r\n        this.mergePageData(initData);\r\n    }\r\n    \r\n    public mergePageData(newData: TypeData)\r\n    {\r\n        Object.assign(this.lastMergeData, newData);\r\n        Object.assign(this.pageData, newData);\r\n    }\r\n    public commitMergeData() //like transaction commit\r\n    {\r\n        this.lastMergeData = {};\r\n    }\r\n    public hasUseLastMergeData(paths: DataPaths): boolean\r\n    {\r\n        for(const p in paths)\r\n        {\r\n            if(paths[p][0] in this.lastMergeData)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    public pushScopeData(scopeData: TypeData)\r\n    {\r\n        this.scopeDataStack.push(scopeData);\r\n        this.data = Object.create(this.data);\r\n        Object.assign(this.data, scopeData);\r\n    }\r\n    public popScopeData(scopeData: TypeData)\r\n    {\r\n        if (this.scopeDataStack[this.scopeDataStack.length - 1] != scopeData)\r\n            throw new Error(\"popScopeData fail! scopeData not last data.\");\r\n\r\n        this.scopeDataStack.pop();\r\n        this.data = Object.getPrototypeOf(this.data);\r\n    }\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { ElementRenderInfo, NodeElementInfo, NodeInfo } from \"./NodeInfo\";\r\n\r\nexport interface DirectiveConfig<N extends Node = Node>\r\n{\r\n    attr?: string;\r\n    create: (controller: PageController, node: N, info: NodeInfo, config: DirectiveConfig<N>)=>Directive<N>|null;\r\n}\r\n\r\nexport interface DirectiveRender<N extends Node = Node>\r\n{\r\n    (element: N, renderInfo: ElementRenderInfo): N[];\r\n}\r\n// class DirectiveText extends Directive\r\n// {\r\n// }\r\n\r\n\r\nexport abstract class Directive<N extends Node = Node>\r\n{\r\n    public static hasDirective(_info: NodeInfo) : boolean\r\n    {\r\n        const info = _info as NodeElementInfo;\r\n        \r\n        if(!info.directives || !Array.isArray(info.directives))\r\n            return false;\r\n        \r\n        for(const d of info.directives)\r\n        {\r\n            if(d instanceof this)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    // public name: string = null;\r\n    // public abstract buildNode(nodeInfo: NodeInfo, node: Node);\r\n    public abstract render(element: N, renderInfo: ElementRenderInfo, continueRender: DirectiveRender<N>): N[];\r\n    // public abstract unsetNode(nodeInfo: NodeInfo);\r\n    protected controller: PageController;\r\n    protected constructor(controller: PageController)\r\n    {\r\n        this.controller = controller;\r\n    }\r\n}\r\n\r\n// class DirectiveElementStateClass extends Directive //live-state=\"rendering|complete\"\r\n// {\r\n// }\r\n// class DirectiveElementContent extends Directive //live:cont\r\n// {\r\n// }\r\n\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nconst propLiveKeyData = Symbol(\"LiveDomKeyDataProp\");\r\n\r\nexport class DirectiveElementEach extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementEach\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        \r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n        \r\n        const directive = new DirectiveElementEach(controller, element, attrInfo);\r\n        \r\n        if(element.hasAttribute(\"live:item\"))\r\n        {\r\n            directive.itemName = element.getAttribute(\"live:item\");\r\n            element.removeAttribute(\"live:item\");\r\n        }\r\n        \r\n        if(element.hasAttribute(\"live:index\"))\r\n        {\r\n            directive.indexName = element.getAttribute(\"live:index\");\r\n            element.removeAttribute(\"live:index\");\r\n        }\r\n        \r\n        return directive;\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    private itemName: string = \"item\";\r\n    private indexName: string = \"index\";\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const items = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        // info.directivesVal[attrLiveEach] = items;\r\n        \r\n        if(!Array.isArray(items) || items.length == 0)\r\n            return [];\r\n        \r\n        let renderElements: Element[] = [];\r\n        for(let i=0, l=items.length; i<l; ++i)\r\n        {\r\n            const item = items[i];\r\n            // console.log(\"DirectiveElementEach item:\", item);\r\n            const keyVal = item; //TODO keyGetter(item), default return item\r\n            \r\n            // console.log(\"processElementEach itemElement from exists: \", info.exists.find((ele: Element) => ele[propLiveKeyData]==keyVal && renderElements.indexOf(ele)<0));\r\n            // const itemElement = this.controller.cloneNode(elementInfo.element);\r\n            const itemElement = info.exists.find((ele: Element) => propLiveKeyData in ele && ele[propLiveKeyData] == keyVal && renderElements.indexOf(ele) < 0) as Element ||\r\n                                this.controller.cloneNode(elementInfo.element);\r\n            itemElement[propLiveKeyData] = keyVal;\r\n            \r\n            const scopeData = { [this.itemName]: item, [this.indexName]: i };\r\n            this.controller.dataManager.pushScopeData(scopeData);\r\n            const itemRenderElements = continueRender(itemElement, info);\r\n            this.controller.dataManager.popScopeData(scopeData);\r\n            \r\n            if (itemRenderElements.length > 0)\r\n                renderElements.push(itemRenderElements[0]);\r\n        }\r\n\r\n        return renderElements;\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementElse extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementElse\r\n    {\r\n        if (!element.hasAttribute(config.attr))\r\n            return null;\r\n        \r\n        element.removeAttribute(config.attr);\r\n        \r\n        return new DirectiveElementElse(controller, element);\r\n    }\r\n    \r\n    // private element: Element;\r\n    protected constructor(controller: PageController, element: Element)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementElse renderNode:\", element, element.previousElementSibling, info);\r\n        let prevNode: Node = info.exists[0];\r\n        while(prevNode = prevNode.previousSibling)\r\n        {\r\n            if(this.controller.isPlaceholder(prevNode))\r\n            {\r\n                const prevNodeInfo = this.controller.getNodeInfo(prevNode);\r\n                if(DirectiveElementIf.hasDirective(prevNodeInfo) || DirectiveElementEach.hasDirective(prevNodeInfo))\r\n                    return continueRender(element, info);\r\n                \r\n                break;\r\n            }\r\n            \r\n            if(prevNode.nodeType == 1) //1: Node.ELEMENT_NODE\r\n                break;\r\n        }\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, AttrInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementIf extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementIf\r\n    {\r\n        if (!info.attrs[config.attr])\r\n            return null;\r\n        \r\n        const attrInfo = info.attrs[config.attr];\r\n        \r\n        element.removeAttribute(config.attr);\r\n        delete info.attrs[config.attr];\r\n        \r\n        return new DirectiveElementIf(controller, element, attrInfo);\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrInfo: AttrInfo;\r\n    \r\n    protected constructor(controller: PageController, element: Element, attrInfo: AttrInfo)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrInfo = attrInfo;\r\n    }\r\n    \r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        // const directiveAttrInfo = elementInfo.directiveAttrs[attrLiveEach];\r\n        const val = this.attrInfo.exec(this.controller.dataManager.data);\r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        if (val)\r\n            return continueRender(element, info);\r\n        \r\n        return [];\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport class DirectiveElementRender extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveElementRender\r\n    {\r\n        return new DirectiveElementRender(controller);\r\n    }\r\n\r\n    public render(element: Element, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementRender renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n\r\n        for (const attrName in elementInfo.attrs)\r\n        {\r\n            // if has custom element and xxxxx()\r\n            // else if attrVal != attr.value\r\n            const attrInfo = elementInfo.attrs[attrName];\r\n            const attrVal = attrInfo.exec(this.controller.dataManager.data);\r\n            // renderInfo.attrsVal[attrName] = attrVal;\r\n            element.setAttribute(attrName, attrVal);\r\n        }\r\n\r\n        this.controller.renderChildNodes(element);\r\n\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","import { Directive, DirectiveConfig, DirectiveRender } from \"./Directive\";\r\nimport { NodeElementInfo, ElementRenderInfo, AttrInfo } from \"./NodeInfo\";\r\nimport { PageController } from \"./PageController\";\r\n\r\ntype AttrsInfoMap = {[name: string]: AttrInfo};\r\n\r\nexport class DirectiveHtmlInputRender extends Directive\r\n{\r\n    public static create(controller: PageController, element: Element, info: NodeElementInfo, config: DirectiveConfig): DirectiveHtmlInputRender\r\n    {\r\n        if(element.tagName.toLocaleLowerCase() != \"input\")\r\n            return null;\r\n        \r\n        const attrs: AttrsInfoMap = {};\r\n        \r\n        if(element.hasAttribute(\"value\") && info.attrs.value)\r\n        {\r\n            attrs.value = info.attrs.value;\r\n            element.removeAttribute(\"value\");\r\n            delete info.attrs.value;\r\n        }\r\n        \r\n        if(element.hasAttribute(\"checked\") && info.attrs.checked)\r\n        {\r\n            attrs.checked = info.attrs.checked;\r\n            element.removeAttribute(\"checked\");\r\n            delete info.attrs.checked;\r\n        }\r\n        \r\n        if(Object.keys(attrs).length > 0)\r\n            return new DirectiveHtmlInputRender(controller, element, attrs);\r\n        return null;\r\n    }\r\n    \r\n    // private element: Element;\r\n    private attrs: AttrsInfoMap;\r\n\r\n    protected constructor(controller: PageController, element: Element, attrs: AttrsInfoMap)\r\n    {\r\n        super(controller);\r\n        // this.element = element;\r\n        this.attrs = attrs;\r\n    }\r\n\r\n    public render(element: HTMLInputElement, info: ElementRenderInfo, continueRender: DirectiveRender<Element>)\r\n    {\r\n        // console.log(\"DirectiveElementEach renderNode:\", element, info);\r\n        const elementInfo = info.elementInfo;\r\n        \r\n        if(this.attrs.value && this.controller.dataManager.hasUseLastMergeData(this.attrs.value.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.value.exec(this.controller.dataManager.data);\r\n            element.setAttribute(\"value\", val);\r\n            element.value = val;\r\n        }\r\n        \r\n        if(this.attrs.checked && this.controller.dataManager.hasUseLastMergeData(this.attrs.checked.paths))\r\n        {\r\n            //TODO check has use merge data\r\n            const val = this.attrs.checked.exec(this.controller.dataManager.data);\r\n            // element.setAttribute(\"value\", val);\r\n            element.checked = !!val;\r\n        }\r\n        \r\n        // console.log(\"DirectiveElementEach items:\", items);\r\n        return continueRender(element, info);\r\n    }\r\n}\r\n","\r\n\r\nexport interface DomScannerOptions\r\n{\r\n    elementStart(element: Element): void;\r\n    elementEnd(element: Element): void;\r\n    comment(comment: Comment): void;\r\n    text(text: Text): void;\r\n}\r\n\r\nexport abstract class DomScanner\r\n{\r\n    protected doc: Document;\r\n    protected observer: MutationObserver;\r\n    protected options: DomScannerOptions;\r\n    protected ignoreElementTags = {script: true, style: true};\r\n\r\n    public constructor(doc: Document, options: DomScannerOptions)\r\n    {\r\n        this.options = options;\r\n        this.doc = doc;\r\n        this.observer = new MutationObserver(this.mutationObserverCallback.bind(this));\r\n    }\r\n\r\n    public abstract scan(): Promise<void>;\r\n\r\n    private mutationObserverCallback(mutationList: MutationRecord[])\r\n    {\r\n        // console.log(\"mutationObserverCallback:\", mutationList);\r\n        // push into loading queue\r\n    }\r\n}\r\n","import { DomScanner } from \"./DomScanner\";\r\n\r\nexport class DomScannerLoaded extends DomScanner\r\n{\r\n    protected scanPromise: Promise<void> = null;\r\n\r\n    public scan(): Promise<void>\r\n    {\r\n        if (this.scanPromise)\r\n            return this.scanPromise;\r\n\r\n        return this.scanPromise = new Promise<void>((resolve, reject) =>\r\n        {\r\n            if (this.doc.readyState == \"complete\")\r\n            {\r\n                this.walkNode(this.doc.documentElement);\r\n                this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                resolve();\r\n            }\r\n\r\n            else\r\n            {\r\n                this.doc.addEventListener(\"DOMContentLoaded\", () =>\r\n                {\r\n                    this.walkNode(this.doc.documentElement);\r\n                    this.observer.observe(this.doc.documentElement, { subtree: true, childList: true, attributes: true, characterData: true });\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    protected walkNode(node: Node)\r\n    {\r\n        // console.log(\"walk node:\", node, this.isCompletedNode(node));\r\n        switch (node.nodeType)\r\n        {\r\n            case 1: //ELEMENT_NODE\r\n                this.processElement(node as Element);\r\n                break;\r\n            case 3: //TEXT_NODE\r\n                this.processText(node as Text);\r\n                break;\r\n            // case 4: //CDATA_SECTION_NODE\r\n            //     if(childInfo = initText(controller, node as Text))\r\n            //     {\r\n            //         info.watch = info.watch.concat(childInfo.watch);\r\n            //     }\r\n            //     break;\r\n            case 8: //COMMENT_NODE\r\n                this.processComment(node as Comment);\r\n                break;\r\n            // default : //Not support type\r\n            //     break;\r\n        }\r\n\r\n    }\r\n\r\n    protected processElement(element: Element)\r\n    {\r\n        // console.log(\"process element:\", element);\r\n        if (this.ignoreElementTags[element.tagName.toLowerCase()])\r\n            return;\r\n\r\n        // if(this.incompleteNodes.indexOf(element) < 0)\r\n        this.processElementStart(element);\r\n\r\n        element.childNodes.forEach((node: Node) =>\r\n        {\r\n            this.walkNode(node);\r\n        });\r\n\r\n        this.processElementEnd(element);\r\n    }\r\n\r\n    protected processElementStart(element: Element)\r\n    {\r\n        // console.log(\"processElementStart:\", element);\r\n        this.options.elementStart(element);\r\n    }\r\n    protected processElementEnd(element: Element)\r\n    {\r\n        // console.log(\"processElementEnd:\", element);\r\n        this.options.elementEnd(element);\r\n    }\r\n    protected processComment(node: Comment)\r\n    {\r\n        // console.log(\"processComment:\", node);\r\n        this.options.comment(node);\r\n    }\r\n    protected processText(node: Text)\r\n    {\r\n        // console.log(\"processText:\", node);\r\n        this.options.text(node);\r\n    }\r\n}\r\n","import { createPage, Page, PageOptions } from \"./Page\";\r\nimport { PageController } from \"./PageController\";\r\n\r\nexport default class LiveDom\r\n{\r\n    public static initPage(options: PageOptions = {}) : Page\r\n    {\r\n        const controller = new PageController(document, options);\r\n        return createPage(controller);\r\n    }\r\n}\r\n\r\n","import { TypeData } from \"./DataManager\";\r\nimport { PageController } from \"./PageController\";\r\n\r\n //TODO singleton for page, and life in doc\r\n\r\nexport interface PageOptions\r\n{\r\n    // container?: Element|string;\r\n    data?: TypeData; //init data\r\n    // directives?: MapObject<DirectiveOptions>;\r\n    onPageSetupCompleted?: ()=>void;\r\n    // debug?: boolean;\r\n}\r\n\r\nexport function createPage(controller: PageController) : Page\r\n{\r\n    const page = new Page();\r\n    \r\n    page.updateData = controller.updatePageData.bind(controller);\r\n    // page.onReady = function(cb)\r\n    // {\r\n    //     controller.scanCompletedPromise.then(cb);\r\n    // }\r\n    \r\n    return page;\r\n}\r\n\r\nexport class Page\r\n{\r\n    public updateData: (data: TypeData) => Promise<void>;\r\n    // public onReady: (callback: ()=>void) => void;\r\n}\r\n\r\n","import { DomScanner } from \"./DomScanner\";\r\nimport { DomScannerLoaded } from \"./DomScannerLoaded\";\r\nimport { Parser } from \"./Parser\";\r\nimport { PageOptions } from \"./Page\";\r\nimport { DataManager, TypeData } from \"./DataManager\";\r\nimport { AttrInfo, ElementRenderInfo, NodeElementInfo, NodeInfo, NodeTextInfo } from \"./NodeInfo\";\r\nimport { Directive, DirectiveConfig } from \"./Directive\";\r\nimport { DirectiveElementRender } from \"./DirectiveElementRender\";\r\nimport { DirectiveElementEach } from \"./DirectiveElementEach\";\r\nimport { DirectiveElementIf } from \"./DirectiveElementIf\";\r\nimport { DirectiveElementElse } from \"./DirectiveElementElse\";\r\nimport { DirectiveHtmlInputRender } from \"./DirectiveHtmlInputRender\";\r\n\r\nconst propLiveInfo = Symbol(\"LiveDomInfoProp\");\r\nconst attrLiveName = \"_ld\";\r\nconst attrLiveEach = \"live:each\";\r\nconst attrLiveIf = \"live:if\";\r\nconst attrLiveElse = \"live:else\";\r\nlet nextId = 1001;\r\n\r\nexport class PageController\r\n{\r\n    public doc: Document;\r\n    public options: PageOptions;\r\n    public dataManager: DataManager;\r\n    public scanCompletedPromise: Promise<void> = null;\r\n    \r\n    private scanner: DomScanner;\r\n    private elementDirectivesConfig: DirectiveConfig<Element>[];\r\n    // private directiveText: DirectiveText;\r\n    // private nodeInfos: MapObject<NodeInfo>;\r\n    private requestRenderPagePromise: Promise<void> = null;\r\n    \r\n    public constructor(doc: Document, options: PageOptions)\r\n    {\r\n        this.doc = doc;\r\n        this.options = options;\r\n        this.dataManager = new DataManager(this.options.data || {});\r\n        this.elementDirectivesConfig = [\r\n            {attr: attrLiveEach, create: DirectiveElementEach.create, },\r\n            {attr: attrLiveIf, create: DirectiveElementIf.create, },\r\n            {attr: attrLiveElse, create: DirectiveElementElse.create, },\r\n            {attr: null, create: DirectiveHtmlInputRender.create, },\r\n            {attr: null, create: DirectiveElementRender.create, },\r\n        ];\r\n        // this.directiveText = new DirectiveText();\r\n        // this.nodeInfos = {};\r\n        \r\n        this.scanner = new DomScannerLoaded(document, {\r\n            elementStart: this.scanElementStart.bind(this),\r\n            elementEnd: this.scanElementEnd.bind(this),\r\n            comment: this.scanComment.bind(this),\r\n            text: this.scanText.bind(this),\r\n        });\r\n        \r\n        this.scanCompletedPromise = this.scanner.scan().\r\n        then(() =>\r\n        {\r\n            if(this.options.onPageSetupCompleted)\r\n                this.options.onPageSetupCompleted();\r\n            \r\n            this.requestRenderPage();\r\n        });\r\n    }\r\n    \r\n    public updatePageData(data: TypeData = {}) : Promise<void>\r\n    {\r\n        // console.log(\"updatePageData:\", data);\r\n        this.dataManager.mergePageData(data);\r\n        return this.requestRenderPage();\r\n    }\r\n    private requestRenderPage() : Promise<void>\r\n    {\r\n        if(this.requestRenderPagePromise)\r\n            return this.requestRenderPagePromise;\r\n        \r\n        return this.requestRenderPagePromise = this.scanCompletedPromise.\r\n        then(() => wait(5)).\r\n        then(() =>\r\n        {\r\n            this.requestRenderPagePromise = null;\r\n            this.renderElement(this.doc.documentElement);\r\n            this.dataManager.commitMergeData();\r\n        });\r\n    }\r\n    \r\n    private scanElementStart(element: Element) : void\r\n    {\r\n        // console.log(\"elementStart:\", element);\r\n        this.setupElement(element);\r\n    }\r\n    private scanElementEnd(element: Element) : void\r\n    {\r\n        // this.renderElement(element);\r\n    }\r\n    private scanComment(comment: Comment) : void\r\n    {\r\n        // console.log(\"comment:\", comment);\r\n    }\r\n    private scanText(text: Text) : void\r\n    {\r\n        // console.log(\"text:\", text);\r\n        this.setupText(text);\r\n    }\r\n    \r\n    private setupElement(element: Element)\r\n    {\r\n        const info: NodeElementInfo = {\r\n            id: 'LDE'+(nextId++),\r\n            element,\r\n            placeholderComment: null,\r\n            attrs: {},\r\n            directives: [],\r\n        };\r\n        \r\n        // console.log(\"DirectiveElement build node:\", nodeInfo, node);\r\n        const attrs = element.attributes;\r\n        for(let i=attrs.length-1; i>=0; --i)\r\n        {\r\n            const attr = attrs[i];\r\n            const attrInfo = this.setupAttribute(attr);\r\n            // console.log(\"initElement attribute:\", attr, attrInfo);\r\n            if(attrInfo)\r\n            {\r\n                info.attrs[attr.name] = attrInfo;\r\n                // attr.value = attrInfo.exec(this.data);\r\n            }\r\n        }\r\n        \r\n        this.setupElementDirectives(element, info);\r\n        \r\n        if(Object.keys(info.attrs).length == 0 && Object.keys(info.directives).length == 0)\r\n        {\r\n            this.setNodeInfo(element, null);\r\n            return ;\r\n        }\r\n        \r\n        info.render = this.renderElement.bind(this);\r\n        this.setNodeInfo(element, info);\r\n    }\r\n    private setupElementDirectives(element: Element, info: NodeElementInfo)\r\n    {\r\n        for(const config of this.elementDirectivesConfig)\r\n        {\r\n            const directive = config.create(this, element, info, config);\r\n            if(directive)\r\n                info.directives.push(directive);\r\n        }\r\n    }\r\n    private setupAttribute(attr: Attr) : AttrInfo\r\n    {\r\n        const srcVal = attr.value;\r\n        const parseResult = Parser.parseText(srcVal);\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return null;\r\n        \r\n        return {\r\n            // srcVal,\r\n            paths: parseResult.paths,\r\n            exec: parseResult.exec,\r\n        };\r\n    }\r\n    private renderElement(placeholder: Element)\r\n    {\r\n        const elementInfo = this.getNodeInfo(placeholder) as NodeElementInfo;\r\n        // console.log(\"renderElement:\", placeholder, this.isLiveNode(placeholder), elementInfo);\r\n        if(! elementInfo)\r\n        {\r\n            this.renderChildNodes(placeholder);\r\n            return ;\r\n        }\r\n        \r\n        const exists: Node[] = [placeholder];\r\n        let nextNode = placeholder.nextSibling;\r\n        while(nextNode)\r\n        {\r\n            const nextInfo = this.getNodeInfo(nextNode);\r\n            if(nextInfo != elementInfo)\r\n                break;\r\n            \r\n            exists.push(nextNode);\r\n            nextNode = nextNode.nextSibling;\r\n        }\r\n        \r\n        const renderInfo: ElementRenderInfo = {\r\n            elementInfo,\r\n            exists,\r\n            // attrsVal: {}, //TODO no use\r\n        };\r\n        \r\n        const element = placeholder.nodeType==1 ? placeholder as Element : elementInfo.element;\r\n        const renderElements = this.processElementDirectiveRender(element, renderInfo, 0);\r\n        // console.log(\"renderElement renderElements:\", element, renderElements, renderInfo);\r\n        if(renderElements.length == 0)\r\n        {\r\n            // console.log(\"renderElement renderElements remove:\", exists.length, element.parentNode, element);\r\n            const placeholderComment = this.getPlaceholderComment(elementInfo);\r\n            insertAfter(placeholder, placeholderComment);\r\n            for(const ele of exists)\r\n            {\r\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>\", ele.parentNode, ele);\r\n                if(ele != placeholderComment)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let prev = placeholder;\r\n            for(const ele of renderElements)\r\n            {\r\n                insertAfter(prev, ele);\r\n                prev = ele;\r\n            }\r\n            \r\n            for(const ele of exists)\r\n            {\r\n                if(renderElements.indexOf(ele as Element) < 0)\r\n                    removeNode(ele);\r\n            }\r\n        }\r\n    }\r\n    private processElementDirectiveRender(element: Element, renderInfo: ElementRenderInfo, directiveIndex: number) : Element[]\r\n    {\r\n        const directives = renderInfo.elementInfo.directives;\r\n        \r\n        if(directiveIndex < directives.length)\r\n        {\r\n            return directives[directiveIndex].render(\r\n                element,\r\n                renderInfo, \r\n                (ele: Element, info: ElementRenderInfo) => this.processElementDirectiveRender(ele, info, directiveIndex+1)\r\n            );\r\n        }\r\n        \r\n        return [element];\r\n    }\r\n    public isPlaceholder(node: Node) : boolean\r\n    {\r\n        if(node.nodeType != 8) //8: Node.COMMENT_NODE\r\n            return false;\r\n        \r\n        const info = this.getNodeInfo(node) as NodeElementInfo;\r\n        return !!info && info.placeholderComment == node;\r\n    }\r\n    private getPlaceholderComment(info: NodeElementInfo) : Comment\r\n    {\r\n        if(info.placeholderComment)\r\n            return info.placeholderComment;\r\n        \r\n        info.placeholderComment = this.doc.createComment(\"_LiveDomId=\"+info.id);\r\n        this.setNodeInfo(info.placeholderComment, info);\r\n        return info.placeholderComment;\r\n    }\r\n    public renderChildNodes(parentNode: Node)\r\n    {\r\n        const t = nextId ++;\r\n        const nodes = [];\r\n        const l = parentNode.childNodes.length;\r\n        for(let i=0; i<l; ++i)\r\n            nodes.push(parentNode.childNodes[i]);\r\n        \r\n        for(let i=0; i<l; ++i)\r\n        {\r\n            const node = nodes[i];\r\n            const info = this.getNodeInfo(node);\r\n            if(!info)\r\n            {\r\n                if(node.nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                    this.renderChildNodes(node);\r\n                continue;\r\n            }\r\n            \r\n            if(info._t == t)\r\n                continue;\r\n            \r\n            info.render(node);\r\n            info._t = t;\r\n        }\r\n    }\r\n    \r\n    private setupText(text: Text)\r\n    {\r\n        const parseResult = Parser.parseText(text.data);\r\n        // console.log(\"buildNode parseText:\", parseResult, parseResult.exec({}));\r\n        if(!Parser.hasTextExpress(parseResult))\r\n            return ;\r\n        \r\n        const info: NodeTextInfo = {\r\n            id: 'LDT'+(nextId++),\r\n        };\r\n        const textExec = parseResult.exec;\r\n        \r\n        // console.log(\"buildNode:\", info, text);\r\n        info.render = (node: Text) =>\r\n        {\r\n            node.data = textExec(this.dataManager.data);\r\n        }\r\n        this.setNodeInfo(text, info);\r\n        // info.render(text);\r\n    }\r\n    \r\n    public cloneNode<N extends Node>(src: N): N\r\n    {\r\n        const des = src.cloneNode(true);\r\n        this.cloneNodesInfo([src], [des]);\r\n        return des as N;\r\n    }\r\n    private cloneNodesInfo(srcNodes: Node[]|NodeListOf<ChildNode>, desNodes: Node[]|NodeListOf<ChildNode>)\r\n    {\r\n        for(let i=0, l=srcNodes.length; i < l; ++i)\r\n        {\r\n            desNodes[i][propLiveInfo] = srcNodes[i][propLiveInfo];\r\n            \r\n            if(srcNodes[i].nodeType == 1) // 1: Node.ELEMENT_NODE\r\n                this.cloneNodesInfo(srcNodes[i].childNodes, desNodes[i].childNodes);\r\n        }\r\n    }\r\n    \r\n    private setNodeInfo(node: Node, info: NodeInfo)\r\n    {\r\n        //weak map ?\r\n        //prop map ?\r\n        node[propLiveInfo] = info;\r\n    }\r\n    public getNodeInfo(node: Node) : NodeInfo\r\n    {\r\n        return node[propLiveInfo] || null;\r\n    }\r\n    private hasNodeInfo(node: Node) : boolean\r\n    {\r\n        return !!node[propLiveInfo];\r\n    }\r\n    private isLiveNode(node: Node) : boolean\r\n    {\r\n        return propLiveInfo in node;\r\n    }\r\n}\r\n\r\n\r\nfunction removeNode(node: Node)\r\n{\r\n    if(node.parentNode)\r\n        node.parentNode.removeChild(node);\r\n}\r\n\r\nfunction insertAfter(before: Node, node: Node)\r\n{\r\n    // console.log(\"insertAfter:\", before, node, before==node, !!before.nextSibling, !!node.parentNode);\r\n    if(before == node)\r\n        return ;\r\n    else if(before.nextSibling)\r\n        before.parentNode.insertBefore(node, before.nextSibling);\r\n    else\r\n        before.parentNode.appendChild(node);\r\n}\r\n\r\nfunction wait(ms: number) : Promise<void>\r\n{\r\n    return new Promise(function(resolve)\r\n    {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n","import { DataPaths, TypeData } from \"./DataManager\";\r\n\r\n//TODO isUseMergeData() field1!==undefined || field1.field2!==undefined || ...\r\n\r\nexport type TextFunction<R=any> = (data: TypeData) => R;\r\n\r\ninterface ParseTextResult\r\n{\r\n    // vars: string[];\r\n    parts: (string|TextFunction)[];\r\n    paths: DataPaths;\r\n    exec(data: TypeData);\r\n}\r\n\r\nexport class Parser\r\n{\r\n    public static parseText(text: string) : ParseTextResult\r\n    {\r\n        const expressionRegex = /\\$\\{\\s*([a-zA-z_]\\w*(\\.\\w+)*)\\s*\\}/g;\r\n        // console.log(\"parseText:\", text.length, text.match(expressionRegex));\r\n        const parts: (string|TextFunction)[] = [];\r\n        const paths: DataPaths = {};\r\n        let match: RegExpExecArray = null;\r\n        let lastIndex = 0;\r\n        \r\n        while(match = expressionRegex.exec(text))\r\n        {\r\n            if(lastIndex < match.index)\r\n                parts.push(text.substring(lastIndex, match.index));\r\n            \r\n            // console.log(\"parseText result:\", result, expressionRegex.lastIndex);\r\n            const names = match[1].split(/\\./g);\r\n            paths[match[1]] = names;\r\n            parts.push(buildTextFunction(names));\r\n            \r\n            lastIndex = expressionRegex.lastIndex;\r\n        }\r\n        \r\n        if(lastIndex < text.length)\r\n            parts.push(text.substring(lastIndex, text.length));\r\n        // console.log(\"parseText lastIndex:\", expressionRegex.lastIndex, parts);\r\n        \r\n        return {\r\n            parts,\r\n            paths,\r\n            exec: buildParseResultRenderer(parts),\r\n        }; \r\n    }\r\n\r\n    public static hasTextExpress(result: ParseTextResult)\r\n    {\r\n        if(result.parts.length > 1)\r\n            return true;\r\n        \r\n        return result.parts.length == 1 && typeof(result.parts[0]) != \"string\";\r\n    }\r\n}\r\n\r\n\r\n// function getWatchVars(info: ParseTextExpressionInfo): string[]\r\n// {\r\n//     // return [info.var.replace(/\\s*\\.\\s*/g, \".\")];\r\n//     return info.var.split(/\\s*\\.\\s*/, 1).slice(0, 1);\r\n// }\r\n\r\nfunction buildTextFunction(names: string[]) : TextFunction\r\n{\r\n    let lastNamePath = \"\";\r\n    let namesPath = names.map((name) =>\r\n    {\r\n        lastNamePath = lastNamePath + \".\" + name;\r\n        return lastNamePath.substring(1);\r\n    });\r\n    \r\n    // let body = \"return data\" + names.map(name => '[\"'+name+'\"]').join(\"\") + \";\";\r\n    let body = `var ${names[0]}=data.${names[0]}; `\r\n            + `return (${namesPath.map(p => `${p}!==null&&${p}!==void 0`).join(\" && \")}) ? ${names.join(\".\")} : null;`;\r\n    \r\n    // console.log(\"buildTextRenderer:\", names, namesPath, body);\r\n    return new Function(\"data\", body) as TextFunction;\r\n}\r\n\r\nfunction buildParseResultRenderer(parts: (string|TextFunction)[])\r\n{\r\n    if(parts.length == 1 && typeof(parts[0]) == \"function\")\r\n    {\r\n        return parts[0];\r\n    }\r\n    \r\n    if(parts.length == 1 && typeof(parts[0]) == \"string\")\r\n    {\r\n        const text = parts[0];\r\n        return function() { return text; };\r\n    }\r\n    \r\n    return function(data: TypeData)\r\n    {\r\n        const results: string[] = [];\r\n        for(const p of parts)\r\n        {\r\n            if(typeof(p) == \"string\")\r\n                results.push(p);\r\n            else\r\n                results.push(p(data));\r\n        }\r\n        \r\n        // console.log(\"textNodeRenderer results:\", results, data);\r\n        return results.join(\"\");\r\n    };\r\n}\r\n\r\n\r\n\r\n","import LiveDom from \"./LiveDom\";\r\n\r\n// console.log(\">>>>>>>>>>>>> LiveDom:\", LiveDom);\r\n\r\n// export function testLiveDom()\r\n// {\r\n//     console.log(\">>>>>>>>>>>>> testLiveDom:\", LiveDom);\r\n    \r\n// }\r\n\r\n// window[\"LiveDom\"] = LiveDom;\r\n\r\nexport = LiveDom;\r\n"]}